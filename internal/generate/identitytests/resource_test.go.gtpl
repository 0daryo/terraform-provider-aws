// Code generated by internal/generate/identitytests/main.go; DO NOT EDIT.

{{ define "Init" }}
	ctx := acctest.Context(t)
	{{ if .ExistsTypeName }}
	var v {{ .ExistsTypeName }}
	{{ end -}}
	{{ template "commonInit" . }}
{{ end }}

{{/* This can be removed when the Exists check supports enhanced region support */}}
{{ define "InitRegionOverride" }}
	ctx := acctest.Context(t)

	{{ template "commonInit" . }}
{{ end }}

{{ define "commonInit" -}}
	resourceName := "{{ .TypeName}}.test"{{ if .Generator }}
	rName := {{ .Generator }}
{{- end }}
{{- range .InitCodeBlocks }}
{{ .Code }}
{{- end -}}
{{ if .UseAlternateAccount }}
	providers := make(map[string]*schema.Provider)
{{ end }}
{{ end }}

{{ define "Test" -}}
resource.{{ if and .Serialize (not .SerializeParallelTests) }}Test{{ else }}ParallelTest{{ end }}
{{- end }}

{{ define "TestCaseSetup" -}}
{{ template "TestCaseSetupNoProviders" . }}
{{- if not .UseAlternateAccount }}
	ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
{{- end -}}
{{- end }}

{{ define "TestCaseSetupNoProviders" -}}
	TerraformVersionChecks: []tfversion.TerraformVersionCheck{
		tfversion.SkipBelow(tfversion.Version1_12_0),
	},
	PreCheck:     func() { acctest.PreCheck(ctx, t)
		{{- range .PreChecks }}
		{{ .Code }}
		{{- end -}}
		{{- range .PreChecksWithRegion }}
		{{ .Code }}(ctx, t, acctest.Region())
		{{- end -}}
	},
	ErrorCheck:   acctest.ErrorCheck(t, names.{{ .PackageProviderNameUpper }}ServiceID),
	CheckDestroy: {{ if .CheckDestroyNoop }}acctest.CheckDestroyNoop{{ else }}testAccCheck{{ .Name }}Destroy(ctx{{ if .DestroyTakesT }}, t{{ end }}){{ end }},
{{- end }}

{{ define "TestCaseSetupRegionOverride" -}}
TerraformVersionChecks: []tfversion.TerraformVersionCheck{
	tfversion.SkipBelow(tfversion.Version1_12_0),
},
PreCheck:     func() { acctest.PreCheck(ctx, t)
	{{- range .PreChecks }}
	{{ .Code }}
	{{ end -}}
	{{- range .PreChecksWithRegion }}
	{{ .Code }}(ctx, t, acctest.AlternateRegion())
	{{- end -}}
},
ErrorCheck:   acctest.ErrorCheck(t, names.{{ .PackageProviderNameUpper }}ServiceID),
CheckDestroy: acctest.CheckDestroyNoop,
{{- if not .UseAlternateAccount }}
	ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
{{- end -}}
{{- end }}

{{ define "TagsKnownValueForNull" -}}
{{ if eq .Implementation "framework" -}}
knownvalue.Null()
{{- else -}}
	{{ if .TagsUpdateForceNew -}}
	knownvalue.Null()
	{{- else -}}
	knownvalue.MapExact(map[string]knownvalue.Check{})
	{{- end }}
{{- end }}
{{- end }}

{{ define "TagsAllPlanCheckForNull" -}}
{{ if .TagsUpdateForceNew -}}
plancheck.ExpectUnknownValue(resourceName, tfjsonpath.New(names.AttrTagsAll)),
{{- else -}}
plancheck.ExpectKnownValue(resourceName, tfjsonpath.New(names.AttrTagsAll), knownvalue.MapExact(map[string]knownvalue.Check{})),
{{- end }}
{{- end }}

{{ define "CommonImportBody" -}}
	ResourceName: resourceName,
	ImportState:  true,
{{ if gt (len .ImportStateID) 0 -}}
	ImportStateId: {{ .ImportStateID }},
{{ end -}}
	ImportStateVerify: true,
{{ if .HasImportStateIDAttribute -}}
	ImportStateVerifyIdentifierAttribute: {{ .ImportStateIDAttribute }},
{{ end }}
{{- end }}

{{ define "ImportCommandWithIDBody" }}
	ImportStateKind:   resource.ImportCommandWithID,
{{ if gt (len .ImportStateIDFunc) 0 -}}
	ImportStateIdFunc: {{ .ImportStateIDFunc }}(resourceName),
{{ else if .HasImportStateIDAttribute -}}
	ImportStateIdFunc: acctest.AttrImportStateIdFunc(resourceName, {{ .ImportStateIDAttribute }}),
{{ end -}}
{{ template "CommonImportBody" . -}}
{{- if gt (len .ImportIgnore) 0 -}}
	ImportStateVerifyIgnore: []string{
	{{ range $i, $v := .ImportIgnore }}{{ $v }},{{ end }}
	},
{{- end }}
{{ end }}

{{ define "ImportCommandWithIDBodyCrossRegion" }}
	ImportStateKind:   resource.ImportCommandWithID,
{{ if gt (len .ImportStateIDFunc) 0 -}}
	ImportStateIdFunc: acctest.CrossRegionImportStateIdFuncAdapter(resourceName, {{ .ImportStateIDFunc }}),
{{ else if .HasImportStateIDAttribute -}}
	// TODO
{{ else -}}
	ImportStateIdFunc: acctest.CrossRegionImportStateIdFunc(resourceName),
{{ end -}}
{{ template "CommonImportBody" . -}}
{{- if gt (len .ImportIgnore) 0 -}}
	ImportStateVerifyIgnore: []string{
	{{ range $i, $v := .ImportIgnore }}{{ $v }},{{ end }}
	},
{{- end }}
{{ end }}

{{ define "ImportBlockWithIDBody" }}
	ResourceName:    resourceName,
	ImportState:     true,
	ImportStateKind: resource.ImportBlockWithID,
{{ if gt (len .ImportStateIDFunc) 0 -}}
	ImportStateIdFunc: {{ .ImportStateIDFunc }}(resourceName),
{{ else if .HasImportStateIDAttribute -}}
	ImportStateIdFunc: acctest.AttrImportStateIdFunc(resourceName, {{ .ImportStateIDAttribute }}),
{{ end -}}
{{ end }}

{{ define "ImportBlockWithIDBodyCrossRegion" }}
	ResourceName:    resourceName,
	ImportState:     true,
	ImportStateKind: resource.ImportBlockWithID,
{{ if gt (len .ImportStateIDFunc) 0 -}}
	ImportStateIdFunc: acctest.CrossRegionImportStateIdFuncAdapter(resourceName, {{ .ImportStateIDFunc }}),
{{ else if .HasImportStateIDAttribute -}}
	// TODO
{{ else -}}
	ImportStateIdFunc: acctest.CrossRegionImportStateIdFunc(resourceName),
{{ end -}}
{{ end }}

{{ define "ImportBlockWithResourceIdentityBody" }}
	ResourceName:    resourceName,
	ImportState:     true,
	ImportStateKind: resource.ImportBlockWithResourceIdentity,
{{ end }}

{{ define "testname" -}}
{{ if .Serialize }}testAcc{{ else }}TestAcc{{ end }}{{ .ResourceProviderNameUpper }}{{ .Name }}
{{- end }}

{{ define "ExistsCheck" }}
	testAccCheck{{ .Name }}Exists(ctx, {{ if .ExistsTakesT }}t,{{ end }} resourceName{{ if .ExistsTypeName}}, &v{{ end }}),
{{ end }}

{{ define "AdditionalTfVars" -}}
	{{ range $name, $value := .AdditionalTfVars -}}
	{{ $name }}: config.StringVariable({{ $value }}),
	{{ end -}}
{{ end }}

package {{ .ProviderPackage }}_test

import (
	{{ if .OverrideIdentifier }}
	"context"
	{{- end }}
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/config"
	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/knownvalue"
	"github.com/hashicorp/terraform-plugin-testing/plancheck"
	"github.com/hashicorp/terraform-plugin-testing/statecheck"
	"github.com/hashicorp/terraform-plugin-testing/tfjsonpath"
	"github.com/hashicorp/terraform-plugin-testing/tfversion"
	"github.com/hashicorp/terraform-provider-aws/internal/acctest"
	tfknownvalue "github.com/hashicorp/terraform-provider-aws/internal/acctest/knownvalue"
	tfstatecheck "github.com/hashicorp/terraform-provider-aws/internal/acctest/statecheck"
	"github.com/hashicorp/terraform-provider-aws/names"
	{{- if .OverrideIdentifier }}
	tfstatecheck "github.com/hashicorp/terraform-provider-aws/internal/acctest/statecheck"
	tf{{ .ProviderPackage }} "github.com/hashicorp/terraform-provider-aws/internal/service/{{ .ProviderPackage }}"
	"github.com/hashicorp/terraform-provider-aws/internal/types"
	{{- end }}
	{{ range .GoImports -}}
	{{ if .Alias }}{{ .Alias }} {{ end }}"{{ .Path }}"
	{{ end }}
)

{{ if .Serialize }}
func {{ template "testname" . }}_IdentitySerial(t *testing.T) {
	t.Helper()
	{{ if .SerializeParallelTests -}}
	t.Parallel()
	{{- end }}

	testCases := map[string]func(t *testing.T){
		acctest.CtBasic:  {{ template "testname" . }}_Identity_Basic,
		{{ if .GenerateRegionOverrideTest -}}
		"RegionOverride": {{ template "testname" . }}_Identity_RegionOverride,
		{{ end -}}
	}

	acctest.RunSerialTests1Level(t, testCases, {{ if .SerializeDelay }}serializeDelay{{ else }}0{{ end }})
}
{{ end }}

func {{ template "testname" . }}_Identity_Basic(t *testing.T) {
	{{- template "Init" . }}

	{{ template "Test" . }}(t, resource.TestCase{
		{{ template "TestCaseSetup" . }}
		Steps: []resource.TestStep{
			{
				{{ if .UseAlternateAccount -}}
					ProtoV5ProviderFactories: acctest.ProtoV5FactoriesNamedAlternate(ctx, t, providers),
				{{ end -}}
				ConfigDirectory: config.StaticDirectory("testdata/{{ .Name }}/basic/"),
				ConfigVariables: config.Variables{ {{ if .Generator }}
					acctest.CtRName: config.StringVariable(rName),{{ end }}
					{{ template "AdditionalTfVars" . }}
				},
				{{ if .HasExistsFunc -}}
				Check:  resource.ComposeAggregateTestCheckFunc(
					{{- template "ExistsCheck" . -}}
				),
				{{ end -}}
				ConfigStateChecks: []statecheck.StateCheck{
					{{ if ne .ARNFormat "" -}}
						{{ if .IsGlobal -}}
							tfstatecheck.ExpectGlobalARNFormat(resourceName, tfjsonpath.New({{ .ARNAttribute }}), "{{ .ARNService }}", "{{ .ARNFormat }}"),
						{{ else -}}
							tfstatecheck.ExpectRegionalARNFormat(resourceName, tfjsonpath.New({{ .ARNAttribute }}), "{{ .ARNService }}", "{{ .ARNFormat }}"),
						{{ end -}}
					{{ end -}}
					{{ if .HasIDAttrDuplicates -}}
						statecheck.CompareValuePairs(resourceName, tfjsonpath.New(names.AttrID), resourceName, tfjsonpath.New({{ .IDAttrDuplicates }}), compare.ValuesSame()),
					{{ else if .IsGlobalSingleton -}}
						statecheck.ExpectKnownValue(resourceName, tfjsonpath.New(names.AttrID), knownvalue.StringExact(acctest.AccountID(ctx))),
					{{ end -}}
					{{ if not .IsGlobal -}}
						statecheck.ExpectKnownValue(resourceName, tfjsonpath.New(names.AttrRegion), knownvalue.StringExact(acctest.Region())),
					{{ end -}}
					{{ if .ArnIdentity -}}
						statecheck.ExpectIdentityValueMatchesState(resourceName, tfjsonpath.New({{ .ARNAttribute }})),
					{{ else if .IsRegionalSingleton }}
						statecheck.ExpectIdentityValueMatchesState(resourceName, tfjsonpath.New(names.AttrRegion)),
					{{ else -}}
						statecheck.ExpectIdentity(resourceName, map[string]knownvalue.Check{
							names.AttrAccountID: tfknownvalue.AccountID(),
							names.AttrRegion:    knownvalue.StringExact(acctest.Region()),
							{{ range .IdentityAttributes -}}
								{{ . }}: knownvalue.NotNull(),
							{{- end }}
						}),
						{{ range .IdentityAttributes -}}
							statecheck.ExpectIdentityValueMatchesState(resourceName, tfjsonpath.New({{ . }})),
						{{- end }}
					{{ end -}}
				},
			},
			{{ if not .NoImport -}}
				{
					{{ if .UseAlternateAccount -}}
						ProtoV5ProviderFactories: acctest.ProtoV5FactoriesNamedAlternate(ctx, t, providers),
					{{ end -}}
					ConfigDirectory: config.StaticDirectory("testdata/{{ .Name }}/basic/"),
					ConfigVariables: config.Variables{ {{ if .Generator }}
						acctest.CtRName: config.StringVariable(rName),{{ end }}
						{{ template "AdditionalTfVars" . }}
					},
					{{- template "ImportCommandWithIDBody" . -}}
				},
				{{ if gt (len .ImportIgnore) 0 }}
				// TODO: Plannable import cannot be tested due to import diffs
				{{- else }}
					{
						ConfigDirectory: config.StaticDirectory("testdata/{{ .Name }}/basic/"),
						ConfigVariables: config.Variables{ {{ if .Generator }}
							acctest.CtRName: config.StringVariable(rName),{{ end }}
							{{ template "AdditionalTfVars" . }}
						},
						{{- template "ImportBlockWithIDBody" . -}}
						ImportPlanChecks: resource.ImportPlanChecks{
							PreApply: []plancheck.PlanCheck{
								{{ if .ArnIdentity -}}
									plancheck.ExpectKnownValue(resourceName, tfjsonpath.New({{ .ARNAttribute }}), knownvalue.NotNull()),
									plancheck.ExpectKnownValue(resourceName, tfjsonpath.New(names.AttrID), knownvalue.NotNull()),
								{{ end -}}
								{{ if not .IsGlobal -}}
									plancheck.ExpectKnownValue(resourceName, tfjsonpath.New(names.AttrRegion), knownvalue.StringExact(acctest.Region())),
								{{ end -}}
							},
						},
					},
					{
						ConfigDirectory: config.StaticDirectory("testdata/{{ .Name }}/basic/"),
						ConfigVariables: config.Variables{ {{ if .Generator }}
							acctest.CtRName: config.StringVariable(rName),{{ end }}
							{{ template "AdditionalTfVars" . }}
						},
						{{- template "ImportBlockWithResourceIdentityBody" . -}}
						ImportPlanChecks: resource.ImportPlanChecks{
							PreApply: []plancheck.PlanCheck{
								{{ if .ArnIdentity -}}
									plancheck.ExpectKnownValue(resourceName, tfjsonpath.New({{ .ARNAttribute }}), knownvalue.NotNull()),
									plancheck.ExpectKnownValue(resourceName, tfjsonpath.New(names.AttrID), knownvalue.NotNull()),
								{{ end -}}
								{{ if not .IsGlobal -}}
									plancheck.ExpectKnownValue(resourceName, tfjsonpath.New(names.AttrRegion), knownvalue.StringExact(acctest.Region())),
								{{ end -}}
							},
						},
					},
				{{ end }}
			{{- end }}
		},
	})
}

{{ if .GenerateRegionOverrideTest }}
func {{ template "testname" . }}_Identity_RegionOverride(t *testing.T) {
	{{- template "InitRegionOverride" . }}

	{{ template "Test" . }}(t, resource.TestCase{
		{{ template "TestCaseSetupRegionOverride" . }}
		Steps: []resource.TestStep{
			{
				{{ if .UseAlternateAccount -}}
					ProtoV5ProviderFactories: acctest.ProtoV5FactoriesNamedAlternate(ctx, t, providers),
				{{ end -}}
				ConfigDirectory: config.StaticDirectory("testdata/{{ .Name }}/region_override/"),
				ConfigVariables: config.Variables{ {{ if .Generator }}
					acctest.CtRName: config.StringVariable(rName),{{ end }}
					{{ template "AdditionalTfVars" . -}}
					"region": config.StringVariable(acctest.AlternateRegion()),
				},
				ConfigStateChecks: []statecheck.StateCheck{
					{{ if ne .ARNFormat "" -}}
						{{ if .IsGlobal -}}
							tfstatecheck.ExpectGlobalARNFormat(resourceName, tfjsonpath.New({{ .ARNAttribute }}), "{{ .ARNService }}", "{{ .ARNFormat }}"),
						{{ else -}}
							tfstatecheck.ExpectRegionalARNAlternateRegionFormat(resourceName, tfjsonpath.New({{ .ARNAttribute }}), "{{ .ARNService }}", "{{ .ARNFormat }}"),
						{{ end -}}
					{{ end -}}
					{{ if .HasIDAttrDuplicates -}}
						statecheck.CompareValuePairs(resourceName, tfjsonpath.New(names.AttrID), resourceName, tfjsonpath.New({{ .IDAttrDuplicates }}), compare.ValuesSame()),
					{{ end -}}
					statecheck.ExpectKnownValue(resourceName, tfjsonpath.New(names.AttrRegion), knownvalue.StringExact(acctest.AlternateRegion())),
					{{ if .ArnIdentity -}}
						statecheck.ExpectIdentityValueMatchesState(resourceName, tfjsonpath.New({{ .ARNAttribute }})),
					{{ else if .IsRegionalSingleton }}
						statecheck.ExpectIdentityValueMatchesState(resourceName, tfjsonpath.New(names.AttrRegion)),
					{{ else -}}
						statecheck.ExpectIdentity(resourceName, map[string]knownvalue.Check{
							names.AttrAccountID: tfknownvalue.AccountID(),
							names.AttrRegion:    knownvalue.StringExact(acctest.AlternateRegion()),
							{{ range .IdentityAttributes -}}
								{{ . }}: knownvalue.NotNull(),
							{{- end }}
						}),
						{{ range .IdentityAttributes -}}
							statecheck.ExpectIdentityValueMatchesState(resourceName, tfjsonpath.New({{ . }})),
						{{- end }}
					{{ end -}}
				},
			},
			{{ if not .NoImport }}
				{{ if .HasInherentRegion }}
					// Import command with appended "@<region>"
				{{- else }}
					// Import command
				{{- end }}
				{
					{{ if .UseAlternateAccount -}}
						ProtoV5ProviderFactories: acctest.ProtoV5FactoriesNamedAlternate(ctx, t, providers),
					{{ end -}}
					ConfigDirectory: config.StaticDirectory("testdata/{{ .Name }}/region_override/"),
					ConfigVariables: config.Variables{ {{ if .Generator }}
						acctest.CtRName: config.StringVariable(rName),{{ end }}
						{{ template "AdditionalTfVars" . -}}
						"region": config.StringVariable(acctest.AlternateRegion()),
					},
					{{- template "ImportCommandWithIDBodyCrossRegion" . -}}
				},
				{{ if .HasInherentRegion }}
					// Import command without appended "@<region>"
					{
						{{ if .UseAlternateAccount -}}
							ProtoV5ProviderFactories: acctest.ProtoV5FactoriesNamedAlternate(ctx, t, providers),
						{{ end -}}
						ConfigDirectory: config.StaticDirectory("testdata/{{ .Name }}/region_override/"),
						ConfigVariables: config.Variables{ {{ if .Generator }}
							acctest.CtRName: config.StringVariable(rName),{{ end }}
							{{ template "AdditionalTfVars" . -}}
							"region": config.StringVariable(acctest.AlternateRegion()),
						},
						{{- template "ImportCommandWithIDBody" . -}}
					},
				{{ end }}
				{{ if gt (len .ImportIgnore) 0 }}
				// TODO: Plannable import cannot be tested due to import diffs
				{{- else }}
					{{ if .HasInherentRegion }}
						// Import block with Import ID and appended "@<region>"
					{{- else }}
						// Import block with Import ID
					{{- end }}
					{
						ConfigDirectory: config.StaticDirectory("testdata/{{ .Name }}/region_override/"),
						ConfigVariables: config.Variables{ {{ if .Generator }}
							acctest.CtRName: config.StringVariable(rName),{{ end }}
							{{ template "AdditionalTfVars" . -}}
							"region": config.StringVariable(acctest.AlternateRegion()),
						},
						{{- template "ImportBlockWithIDBodyCrossRegion" . -}}
						ImportPlanChecks: resource.ImportPlanChecks{
							PreApply: []plancheck.PlanCheck{
								{{ if .ArnIdentity -}}
									plancheck.ExpectKnownValue(resourceName, tfjsonpath.New({{ .ARNAttribute }}), knownvalue.NotNull()),
									plancheck.ExpectKnownValue(resourceName, tfjsonpath.New(names.AttrID), knownvalue.NotNull()),
								{{ end -}}
								plancheck.ExpectKnownValue(resourceName, tfjsonpath.New(names.AttrRegion), knownvalue.StringExact(acctest.AlternateRegion())),
							},
						},
					},
					{{ if .HasInherentRegion }}
					// Import block with Import ID and no appended "@<region>"
					{
						ConfigDirectory: config.StaticDirectory("testdata/{{ .Name }}/region_override/"),
						ConfigVariables: config.Variables{ {{ if .Generator }}
							acctest.CtRName: config.StringVariable(rName),{{ end }}
							{{ template "AdditionalTfVars" . -}}
							"region": config.StringVariable(acctest.AlternateRegion()),
						},
						{{- template "ImportBlockWithIDBody" . -}}
						ImportPlanChecks: resource.ImportPlanChecks{
							PreApply: []plancheck.PlanCheck{
								{{ if .ArnIdentity -}}
									plancheck.ExpectKnownValue(resourceName, tfjsonpath.New({{ .ARNAttribute }}), knownvalue.NotNull()),
									plancheck.ExpectKnownValue(resourceName, tfjsonpath.New(names.AttrID), knownvalue.NotNull()),
								{{ end -}}
								plancheck.ExpectKnownValue(resourceName, tfjsonpath.New(names.AttrRegion), knownvalue.StringExact(acctest.AlternateRegion())),
							},
						},
					},
					{{ end }}
					// Import block with Resource Identity
					{
						ConfigDirectory: config.StaticDirectory("testdata/{{ .Name }}/region_override/"),
						ConfigVariables: config.Variables{ {{ if .Generator }}
							acctest.CtRName: config.StringVariable(rName),{{ end }}
							{{ template "AdditionalTfVars" . -}}
							"region": config.StringVariable(acctest.AlternateRegion()),
						},
						{{- template "ImportBlockWithResourceIdentityBody" . -}}
						ImportPlanChecks: resource.ImportPlanChecks{
							PreApply: []plancheck.PlanCheck{
								{{ if .ArnIdentity -}}
									plancheck.ExpectKnownValue(resourceName, tfjsonpath.New({{ .ARNAttribute }}), knownvalue.NotNull()),
									plancheck.ExpectKnownValue(resourceName, tfjsonpath.New(names.AttrID), knownvalue.NotNull()),
								{{ end -}}
								plancheck.ExpectKnownValue(resourceName, tfjsonpath.New(names.AttrRegion), knownvalue.StringExact(acctest.AlternateRegion())),
							},
						},
					},
				{{ end }}
			{{- end }}
		},
	})
}
{{ end }}
