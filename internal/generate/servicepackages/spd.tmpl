// Code generated by internal/generate/servicepackages/main.go; DO NOT EDIT.

package {{ .ProviderPackage }}

import (
	"context"

{{- if eq .SDKVersion "1" "1,2" }}
	aws_sdkv1 "github.com/aws/aws-sdk-go/aws"
	session_sdkv1 "github.com/aws/aws-sdk-go/aws/session"
	{{ .GoV1Package }}_sdkv1 "github.com/aws/aws-sdk-go/service/{{ .GoV1Package }}"
{{- end }}
{{- if eq .SDKVersion "2" "1,2" }}
	aws_sdkv2 "github.com/aws/aws-sdk-go-v2/aws"
	{{ .GoV2Package }}_sdkv2 "github.com/aws/aws-sdk-go-v2/service/{{ .GoV2Package }}"
{{- end }}
	"github.com/hashicorp/terraform-provider-aws/internal/types"
{{- if ne .ProviderPackage "meta" }}
	"github.com/hashicorp/terraform-provider-aws/names"
{{- end }}
)

type servicePackage struct {
	endpoint string
}

func (p *servicePackage) FrameworkDataSources(ctx context.Context) []*types.ServicePackageFrameworkDataSource {
	return []*types.ServicePackageFrameworkDataSource {
{{- range .FrameworkDataSources }}
		{
			Factory: {{ .FactoryName }},
			{{- if ne .Name "" }}
			Name:    "{{ .Name }}",
			{{- end }}
			{{- if .TransparentTagging }}
			Tags: &types.ServicePackageResourceTags {
				{{- if ne .TagsIdentifierAttribute "" }}
				IdentifierAttribute: "{{ .TagsIdentifierAttribute }}",
				{{- end }}
				{{- if ne .TagsResourceType "" }}
				ResourceType: "{{ .TagsResourceType }}",
				{{- end }}
			},
			{{- end }}
		},
{{- end }}
	}
}

func (p *servicePackage) FrameworkResources(ctx context.Context) []*types.ServicePackageFrameworkResource {
	return []*types.ServicePackageFrameworkResource {
{{- range .FrameworkResources }}
		{
			Factory: {{ .FactoryName }},
			{{- if ne .Name "" }}
			Name:    "{{ .Name }}",
			{{- end }}
			{{- if .TransparentTagging }}
			Tags: &types.ServicePackageResourceTags {
				{{- if ne .TagsIdentifierAttribute "" }}
				IdentifierAttribute: "{{ .TagsIdentifierAttribute }}",
				{{- end }}
				{{- if ne .TagsResourceType "" }}
				ResourceType: "{{ .TagsResourceType }}",
				{{- end }}
			},
			{{- end }}
		},
{{- end }}
	}
}

func (p *servicePackage) SDKDataSources(ctx context.Context) []*types.ServicePackageSDKDataSource {
	return []*types.ServicePackageSDKDataSource {
{{- range $key, $value := .SDKDataSources }}
		{
			Factory:  {{ $value.FactoryName }},
			TypeName: "{{ $key }}",
			{{- if ne $value.Name "" }}
			Name:     "{{ $value.Name }}",
			{{- end }}
			{{- if $value.TransparentTagging }}
			Tags: &types.ServicePackageResourceTags {
				{{- if ne $value.TagsIdentifierAttribute "" }}
				IdentifierAttribute: "{{ $value.TagsIdentifierAttribute }}",
				{{- end }}
				{{- if ne .TagsResourceType "" }}
				ResourceType: "{{ .TagsResourceType }}",
				{{- end }}
			},
			{{- end }}
		},
{{- end }}
	}
}

func (p *servicePackage) SDKResources(ctx context.Context) []*types.ServicePackageSDKResource {
	return []*types.ServicePackageSDKResource {
{{- range $key, $value := .SDKResources }}
		{
			Factory:  {{ $value.FactoryName }},
			TypeName: "{{ $key }}",
			{{- if ne $value.Name "" }}
			Name:     "{{ $value.Name }}",
			{{- end }}
			{{- if $value.TransparentTagging }}
			Tags: &types.ServicePackageResourceTags {
				{{- if ne $value.TagsIdentifierAttribute "" }}
				IdentifierAttribute: "{{ $value.TagsIdentifierAttribute }}",
				{{- end }}
				{{- if ne .TagsResourceType "" }}
				ResourceType: "{{ .TagsResourceType }}",
				{{- end }}
			},
			{{- end }}
		},
{{- end }}
	}
}

func (p *servicePackage) ServicePackageName() string {
{{- if eq .ProviderPackage "meta" }}
	return "{{ .ProviderPackage }}"
{{- else }}
	return names.{{ .ProviderNameUpper }}
{{- end }}
}

func (p *servicePackage) SetEndpoint(endpoint string) {
	p.endpoint = endpoint
}

{{- if not .SkipClientGenerate }}
	{{if eq .SDKVersion "1" "1,2" }}
// NewConn returns a new AWS SDK for Go v1 client for this service package's AWS API.
func (p *servicePackage) NewConn(ctx context.Context, sess *session_sdkv1.Session) (*{{ .GoV1Package }}_sdkv1.{{ .GoV1ClientTypeName }}, error) {
	return {{ .GoV1Package }}_sdkv1.New(sess.Copy(&aws_sdkv1.Config{Endpoint: aws_sdkv1.String(p.endpoint)})), nil
}
	{{- end }}

	{{if eq .SDKVersion "2" "1,2" }}
// NewClient returns a new AWS SDK for Go v2 client for this service package's AWS API.
func (p *servicePackage) NewClient(ctx context.Context, cfg aws_sdkv2.Config) (*{{ .GoV2Package }}_sdkv2.Client, error) {
	return {{ .GoV2Package }}_sdkv2.NewFromConfig(cfg, func(o *{{ .GoV2Package }}_sdkv2.Options) {
		if p.endpoint != "" {
			o.EndpointResolver = {{ .GoV2Package }}_sdkv2.EndpointResolverFromURL(p.endpoint)
		}
	}), nil
}
	{{- end }}
{{- end }}

var ServicePackage = &servicePackage{}
