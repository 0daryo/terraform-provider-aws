// Code generated by internal/generate/servicepackage/main.go; DO NOT EDIT.

package {{ .ProviderPackage }}

import (
	"context"
{{- if and .GenerateClient .ClientSDKV2 }}
	"fmt"
	"net"
{{ end }}

{{ if .GenerateClient }}
	{{- if .ClientSDKV2 }}
	aws_sdkv2 "github.com/aws/aws-sdk-go-v2/aws"
	{{ .GoV2Package }}_sdkv2 "github.com/aws/aws-sdk-go-v2/service/{{ .GoV2Package }}"
	smithyendpoints "github.com/aws/smithy-go/endpoints"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	{{- end }}
	"github.com/hashicorp/terraform-plugin-log/tflog"
{{- end }}
)

{{- if .GenerateClient }}
{{ if .ClientSDKV2 }}
var _ {{ .GoV2Package }}_sdkv2.EndpointResolverV2 = &resolver{}

type resolver struct {
	defaultResolver {{ .GoV2Package }}_sdkv2.EndpointResolverV2
}

func newEndpointResolver() *resolver {
	return &resolver{
		defaultResolver: {{ .GoV2Package }}_sdkv2.NewDefaultEndpointResolverV2(),
	}
}

func (r *resolver) ResolveEndpoint(ctx context.Context, params {{ .GoV2Package }}_sdkv2.EndpointParameters) (endpoint smithyendpoints.Endpoint, err error) {
	params = params.WithDefaults()
	useFIPS := aws_sdkv2.ToBool(params.UseFIPS)

	if eps := params.Endpoint; aws_sdkv2.ToString(eps) != "" {
		tflog.Debug(ctx, "setting endpoint", map[string]any{
			"tf_aws.endpoint": endpoint,
		})

		if useFIPS {
			tflog.Debug(ctx, "endpoint set, ignoring UseFIPSEndpoint setting")
			params.UseFIPS = aws_sdkv2.Bool(false)
		}

		return r.defaultResolver.ResolveEndpoint(ctx, params)
	} else if useFIPS {
		ctx = tflog.SetField(ctx, "tf_aws.use_fips", useFIPS)

		endpoint, err = r.defaultResolver.ResolveEndpoint(ctx, params)
		if err != nil {
			return endpoint, err
		}

		tflog.Debug(ctx, "endpoint resolved", map[string]any{
			"tf_aws.endpoint": endpoint.URI.String(),
		})

		hostname := endpoint.URI.Hostname()
		_, err = net.LookupHost(hostname)
		if err != nil {
			if dnsErr, ok := errs.As[*net.DNSError](err); ok && dnsErr.IsNotFound {
				tflog.Debug(ctx, "default endpoint host not found, disabling FIPS", map[string]any{
					"tf_aws.hostname": hostname,
				})
				params.UseFIPS = aws_sdkv2.Bool(false)
			} else {
				err = fmt.Errorf("looking up {{ .GoV2Package }} endpoint %q: %s", hostname, err)
				return
			}
		} else {
			return endpoint, err
		}
	}

	return r.defaultResolver.ResolveEndpoint(ctx, params)
}

func withBaseEndpoint(endpoint string) func(*{{ .GoV2Package }}_sdkv2.Options) {
	return func(o *{{ .GoV2Package }}_sdkv2.Options) {
		if endpoint != "" {
			o.BaseEndpoint = aws_sdkv2.String(endpoint)
		}
	}
}
{{ end }}
{{ end }}
