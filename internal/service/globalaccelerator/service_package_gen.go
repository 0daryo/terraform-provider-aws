// Code generated by internal/generate/servicepackage/main.go; DO NOT EDIT.

package globalaccelerator

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/globalaccelerator"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/types"
	"github.com/hashicorp/terraform-provider-aws/names"
)

type servicePackage struct{}

func (p *servicePackage) FrameworkDataSources(ctx context.Context) []*types.ServicePackageFrameworkDataSource {
	return []*types.ServicePackageFrameworkDataSource{
		{
			Factory:  newAcceleratorDataSource,
			TypeName: "aws_globalaccelerator_accelerator",
			Name:     "Accelerator",
		},
	}
}

func (p *servicePackage) FrameworkResources(ctx context.Context) []*types.ServicePackageFrameworkResource {
	return []*types.ServicePackageFrameworkResource{
		{
			Factory:  newCrossAccountAttachmentResource,
			TypeName: "aws_globalaccelerator_cross_account_attachment",
			Name:     "Cross-account Attachment",
			Tags: &types.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrID,
			},
		},
	}
}

func (p *servicePackage) SDKDataSources(ctx context.Context) []*types.ServicePackageSDKDataSource {
	return []*types.ServicePackageSDKDataSource{
		{
			Factory:  dataSourceCustomRoutingAccelerator,
			TypeName: "aws_globalaccelerator_custom_routing_accelerator",
			Name:     "Custom Routing Accelerator",
		},
	}
}

func (p *servicePackage) SDKResources(ctx context.Context) []*types.ServicePackageSDKResource {
	return []*types.ServicePackageSDKResource{
		{
			Factory:  resourceAccelerator,
			TypeName: "aws_globalaccelerator_accelerator",
			Name:     "Accelerator",
			Tags: &types.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrID,
			},
		},
		{
			Factory:  resourceCustomRoutingAccelerator,
			TypeName: "aws_globalaccelerator_custom_routing_accelerator",
			Name:     "Custom Routing Accelerator",
			Tags: &types.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrID,
			},
		},
		{
			Factory:  resourceCustomRoutingEndpointGroup,
			TypeName: "aws_globalaccelerator_custom_routing_endpoint_group",
			Name:     "Custom Routing Endpoint Group",
		},
		{
			Factory:  resourceCustomRoutingListener,
			TypeName: "aws_globalaccelerator_custom_routing_listener",
			Name:     "Custom Routing Listener",
		},
		{
			Factory:  resourceEndpointGroup,
			TypeName: "aws_globalaccelerator_endpoint_group",
			Name:     "Endpoint Group",
		},
		{
			Factory:  resourceListener,
			TypeName: "aws_globalaccelerator_listener",
			Name:     "Listener",
		},
	}
}

func (p *servicePackage) ServicePackageName() string {
	return names.GlobalAccelerator
}

// NewClient returns a new AWS SDK for Go v2 client for this service package's AWS API.
func (p *servicePackage) NewClient(ctx context.Context, config map[string]any) (*globalaccelerator.Client, error) {
	cfg := *(config["aws_sdkv2_config"].(*aws.Config))
	optFns := []func(*globalaccelerator.Options){
		globalaccelerator.WithEndpointResolverV2(newEndpointResolverV2()),
		withBaseEndpoint(config[names.AttrEndpoint].(string)),
		func(o *globalaccelerator.Options) {
			switch partition := config["partition"].(string); partition {
			case "aws":
				if region := "us-west-2"; cfg.Region != region {
					tflog.Info(ctx, "overriding region", map[string]any{
						"original_region": cfg.Region,
						"override_region": region,
					})
					o.Region = region
				}
			}
		},
	}

	return globalaccelerator.NewFromConfig(cfg, optFns...), nil
}

func ServicePackage(ctx context.Context) conns.ServicePackage {
	return &servicePackage{}
}
