// Code generated by internal/generate/servicepackage/main.go; DO NOT EDIT.

package iam

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/iam"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	itypes "github.com/hashicorp/terraform-provider-aws/internal/types"
	"github.com/hashicorp/terraform-provider-aws/names"
)

type servicePackage struct{}

func (p *servicePackage) FrameworkDataSources(ctx context.Context) []*itypes.ServicePackageFrameworkDataSource {
	return []*itypes.ServicePackageFrameworkDataSource{}
}

func (p *servicePackage) FrameworkResources(ctx context.Context) []*itypes.ServicePackageFrameworkResource {
	return []*itypes.ServicePackageFrameworkResource{
		{
			Factory:                 newResourceGroupPoliciesExclusive,
			TypeName:                "aws_iam_group_policies_exclusive",
			Name:                    "Group Policies Exclusive",
			IsRegionOverrideEnabled: false,
		},
		{
			Factory:                 newResourceGroupPolicyAttachmentsExclusive,
			TypeName:                "aws_iam_group_policy_attachments_exclusive",
			Name:                    "Group Policy Attachments Exclusive",
			IsRegionOverrideEnabled: false,
		},
		{
			Factory:                 newOrganizationsFeaturesResource,
			TypeName:                "aws_iam_organizations_features",
			Name:                    "Organizations Features",
			IsRegionOverrideEnabled: false,
		},
		{
			Factory:                 newResourceRolePoliciesExclusive,
			TypeName:                "aws_iam_role_policies_exclusive",
			Name:                    "Role Policies Exclusive",
			IsRegionOverrideEnabled: false,
		},
		{
			Factory:                 newResourceRolePolicyAttachmentsExclusive,
			TypeName:                "aws_iam_role_policy_attachments_exclusive",
			Name:                    "Role Policy Attachments Exclusive",
			IsRegionOverrideEnabled: false,
		},
		{
			Factory:                 newResourceUserPoliciesExclusive,
			TypeName:                "aws_iam_user_policies_exclusive",
			Name:                    "User Policies Exclusive",
			IsRegionOverrideEnabled: false,
		},
		{
			Factory:                 newResourceUserPolicyAttachmentsExclusive,
			TypeName:                "aws_iam_user_policy_attachments_exclusive",
			Name:                    "User Policy Attachments Exclusive",
			IsRegionOverrideEnabled: false,
		},
	}
}

func (p *servicePackage) SDKDataSources(ctx context.Context) []*itypes.ServicePackageSDKDataSource {
	return []*itypes.ServicePackageSDKDataSource{
		{
			Factory:                 dataSourceAccessKeys,
			TypeName:                "aws_iam_access_keys",
			Name:                    "Access Keys",
			IsRegionOverrideEnabled: false,
		},
		{
			Factory:                 dataSourceAccountAlias,
			TypeName:                "aws_iam_account_alias",
			Name:                    "Account Alias",
			IsRegionOverrideEnabled: false,
		},
		{
			Factory:                 dataSourceGroup,
			TypeName:                "aws_iam_group",
			Name:                    "Group",
			IsRegionOverrideEnabled: false,
		},
		{
			Factory:                 dataSourceInstanceProfile,
			TypeName:                "aws_iam_instance_profile",
			Name:                    "Instance Profile",
			IsRegionOverrideEnabled: false,
		},
		{
			Factory:                 dataSourceInstanceProfiles,
			TypeName:                "aws_iam_instance_profiles",
			Name:                    "Instance Profiles",
			IsRegionOverrideEnabled: false,
		},
		{
			Factory:                 dataSourceOpenIDConnectProvider,
			TypeName:                "aws_iam_openid_connect_provider",
			Name:                    "OIDC Provider",
			Tags:                    &itypes.ServicePackageResourceTags{},
			IsRegionOverrideEnabled: false,
		},
		{
			Factory:                 dataSourcePolicy,
			TypeName:                "aws_iam_policy",
			Name:                    "Policy",
			Tags:                    &itypes.ServicePackageResourceTags{},
			IsRegionOverrideEnabled: false,
		},
		{
			Factory:                 dataSourcePolicyDocument,
			TypeName:                "aws_iam_policy_document",
			Name:                    "Policy Document",
			IsRegionOverrideEnabled: false,
		},
		{
			Factory:                 dataSourcePrincipalPolicySimulation,
			TypeName:                "aws_iam_principal_policy_simulation",
			Name:                    "Principal Policy Simulation",
			IsRegionOverrideEnabled: false,
		},
		{
			Factory:                 dataSourceRole,
			TypeName:                "aws_iam_role",
			Name:                    "Role",
			Tags:                    &itypes.ServicePackageResourceTags{},
			IsRegionOverrideEnabled: false,
		},
		{
			Factory:                 dataSourceRoles,
			TypeName:                "aws_iam_roles",
			Name:                    "Roles",
			IsRegionOverrideEnabled: false,
		},
		{
			Factory:                 dataSourceSAMLProvider,
			TypeName:                "aws_iam_saml_provider",
			Name:                    "SAML Provider",
			IsRegionOverrideEnabled: false,
		},
		{
			Factory:                 dataSourceServerCertificate,
			TypeName:                "aws_iam_server_certificate",
			Name:                    "Server Certificate",
			IsRegionOverrideEnabled: false,
		},
		{
			Factory:                 dataSourceSessionContext,
			TypeName:                "aws_iam_session_context",
			Name:                    "Session Context",
			IsRegionOverrideEnabled: false,
		},
		{
			Factory:                 dataSourceUser,
			TypeName:                "aws_iam_user",
			Name:                    "User",
			Tags:                    &itypes.ServicePackageResourceTags{},
			IsRegionOverrideEnabled: false,
		},
		{
			Factory:                 dataSourceUserSSHKey,
			TypeName:                "aws_iam_user_ssh_key",
			Name:                    "User SSH Key",
			IsRegionOverrideEnabled: false,
		},
		{
			Factory:                 dataSourceUsers,
			TypeName:                "aws_iam_users",
			Name:                    "Users",
			IsRegionOverrideEnabled: false,
		},
	}
}

func (p *servicePackage) SDKResources(ctx context.Context) []*itypes.ServicePackageSDKResource {
	return []*itypes.ServicePackageSDKResource{
		{
			Factory:                 resourceAccessKey,
			TypeName:                "aws_iam_access_key",
			Name:                    "Access Key",
			IsRegionOverrideEnabled: false,
		},
		{
			Factory:                 resourceAccountAlias,
			TypeName:                "aws_iam_account_alias",
			Name:                    "Account Alias",
			IsRegionOverrideEnabled: false,
		},
		{
			Factory:                 resourceAccountPasswordPolicy,
			TypeName:                "aws_iam_account_password_policy",
			Name:                    "Account Password Policy",
			IsRegionOverrideEnabled: false,
		},
		{
			Factory:                 resourceGroup,
			TypeName:                "aws_iam_group",
			Name:                    "Group",
			IsRegionOverrideEnabled: false,
		},
		{
			Factory:                 resourceGroupMembership,
			TypeName:                "aws_iam_group_membership",
			Name:                    "Group Membership",
			IsRegionOverrideEnabled: false,
		},
		{
			Factory:                 resourceGroupPolicy,
			TypeName:                "aws_iam_group_policy",
			Name:                    "Group Policy",
			IsRegionOverrideEnabled: false,
		},
		{
			Factory:                 resourceGroupPolicyAttachment,
			TypeName:                "aws_iam_group_policy_attachment",
			Name:                    "Group Policy Attachment",
			IsRegionOverrideEnabled: false,
		},
		{
			Factory:  resourceInstanceProfile,
			TypeName: "aws_iam_instance_profile",
			Name:     "Instance Profile",
			Tags: &itypes.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrID,
				ResourceType:        "InstanceProfile",
			},
			IsRegionOverrideEnabled: false,
		},
		{
			Factory:  resourceOpenIDConnectProvider,
			TypeName: "aws_iam_openid_connect_provider",
			Name:     "OIDC Provider",
			Tags: &itypes.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrARN,
				ResourceType:        "OIDCProvider",
			},
			IsRegionOverrideEnabled: false,
		},
		{
			Factory:  resourcePolicy,
			TypeName: "aws_iam_policy",
			Name:     "Policy",
			Tags: &itypes.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrARN,
				ResourceType:        "Policy",
			},
			IsRegionOverrideEnabled: false,
		},
		{
			Factory:                 resourcePolicyAttachment,
			TypeName:                "aws_iam_policy_attachment",
			Name:                    "Policy Attachment",
			IsRegionOverrideEnabled: false,
		},
		{
			Factory:  resourceRole,
			TypeName: "aws_iam_role",
			Name:     "Role",
			Tags: &itypes.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrName,
				ResourceType:        "Role",
			},
			IsRegionOverrideEnabled: false,
		},
		{
			Factory:                 resourceRolePolicy,
			TypeName:                "aws_iam_role_policy",
			Name:                    "Role Policy",
			IsRegionOverrideEnabled: false,
		},
		{
			Factory:                 resourceRolePolicyAttachment,
			TypeName:                "aws_iam_role_policy_attachment",
			Name:                    "Role Policy Attachment",
			IsRegionOverrideEnabled: false,
		},
		{
			Factory:  resourceSAMLProvider,
			TypeName: "aws_iam_saml_provider",
			Name:     "SAML Provider",
			Tags: &itypes.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrID,
				ResourceType:        "SAMLProvider",
			},
			IsRegionOverrideEnabled: false,
		},
		{
			Factory:                 resourceSecurityTokenServicePreferences,
			TypeName:                "aws_iam_security_token_service_preferences",
			Name:                    "Security Token Service Preferences",
			IsRegionOverrideEnabled: false,
		},
		{
			Factory:  resourceServerCertificate,
			TypeName: "aws_iam_server_certificate",
			Name:     "Server Certificate",
			Tags: &itypes.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrName,
				ResourceType:        "ServerCertificate",
			},
			IsRegionOverrideEnabled: false,
		},
		{
			Factory:  resourceServiceLinkedRole,
			TypeName: "aws_iam_service_linked_role",
			Name:     "Service Linked Role",
			Tags: &itypes.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrID,
				ResourceType:        "ServiceLinkedRole",
			},
			IsRegionOverrideEnabled: false,
		},
		{
			Factory:                 resourceServiceSpecificCredential,
			TypeName:                "aws_iam_service_specific_credential",
			Name:                    "Service Specific Credential",
			IsRegionOverrideEnabled: false,
		},
		{
			Factory:                 resourceSigningCertificate,
			TypeName:                "aws_iam_signing_certificate",
			Name:                    "Signing Certificate",
			IsRegionOverrideEnabled: false,
		},
		{
			Factory:  resourceUser,
			TypeName: "aws_iam_user",
			Name:     "User",
			Tags: &itypes.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrName,
				ResourceType:        "User",
			},
			IsRegionOverrideEnabled: false,
		},
		{
			Factory:                 resourceUserGroupMembership,
			TypeName:                "aws_iam_user_group_membership",
			Name:                    "User Group Membership",
			IsRegionOverrideEnabled: false,
		},
		{
			Factory:                 resourceUserLoginProfile,
			TypeName:                "aws_iam_user_login_profile",
			Name:                    "User Login Profile",
			IsRegionOverrideEnabled: false,
		},
		{
			Factory:                 resourceUserPolicy,
			TypeName:                "aws_iam_user_policy",
			Name:                    "User Policy",
			IsRegionOverrideEnabled: false,
		},
		{
			Factory:                 resourceUserPolicyAttachment,
			TypeName:                "aws_iam_user_policy_attachment",
			Name:                    "User Policy Attachment",
			IsRegionOverrideEnabled: false,
		},
		{
			Factory:                 resourceUserSSHKey,
			TypeName:                "aws_iam_user_ssh_key",
			Name:                    "User SSH Key",
			IsRegionOverrideEnabled: false,
		},
		{
			Factory:  resourceVirtualMFADevice,
			TypeName: "aws_iam_virtual_mfa_device",
			Name:     "Virtual MFA Device",
			Tags: &itypes.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrID,
				ResourceType:        "VirtualMFADevice",
			},
			IsRegionOverrideEnabled: false,
		},
	}
}

func (p *servicePackage) ServicePackageName() string {
	return names.IAM
}

// NewClient returns a new AWS SDK for Go v2 client for this service package's AWS API.
func (p *servicePackage) NewClient(ctx context.Context, config map[string]any) (*iam.Client, error) {
	cfg := *(config["aws_sdkv2_config"].(*aws.Config))
	optFns := []func(*iam.Options){
		iam.WithEndpointResolverV2(newEndpointResolverV2()),
		withBaseEndpoint(config[names.AttrEndpoint].(string)),
		func(o *iam.Options) {
			if region := config["region"].(string); o.Region != region {
				tflog.Info(ctx, "overriding provider-configured AWS API region", map[string]any{
					"service":         "iam",
					"original_region": o.Region,
					"override_region": region,
				})
				o.Region = region
			}
		},
		withExtraOptions(ctx, p, config),
	}

	return iam.NewFromConfig(cfg, optFns...), nil
}

// withExtraOptions returns a functional option that allows this service package to specify extra API client options.
// This option is always called after any generated options.
func withExtraOptions(ctx context.Context, sp conns.ServicePackage, config map[string]any) func(*iam.Options) {
	if v, ok := sp.(interface {
		withExtraOptions(context.Context, map[string]any) []func(*iam.Options)
	}); ok {
		optFns := v.withExtraOptions(ctx, config)

		return func(o *iam.Options) {
			for _, optFn := range optFns {
				optFn(o)
			}
		}
	}

	return func(*iam.Options) {}
}

func ServicePackage(ctx context.Context) conns.ServicePackage {
	return &servicePackage{}
}
