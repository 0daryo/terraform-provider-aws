// Code generated by internal/generate/servicepackage/main.go; DO NOT EDIT.

package appmesh

import (
	"context"
	"unique"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/appmesh"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	inttypes "github.com/hashicorp/terraform-provider-aws/internal/types"
	"github.com/hashicorp/terraform-provider-aws/names"
)

type servicePackage struct{}

func (p *servicePackage) FrameworkDataSources(ctx context.Context) []*inttypes.ServicePackageFrameworkDataSource {
	return []*inttypes.ServicePackageFrameworkDataSource{}
}

func (p *servicePackage) FrameworkResources(ctx context.Context) []*inttypes.ServicePackageFrameworkResource {
	return []*inttypes.ServicePackageFrameworkResource{}
}

func (p *servicePackage) SDKDataSources(ctx context.Context) []*inttypes.ServicePackageSDKDataSource {
	return []*inttypes.ServicePackageSDKDataSource{
		{
			Factory:  dataSourceGatewayRoute,
			TypeName: "aws_appmesh_gateway_route",
			Name:     "Gateway Route",
			Tags:     unique.Make(inttypes.ServicePackageResourceTags{}),
			Region:   unique.Make(inttypes.ServicePackageResourceRegion{}),
		},
		{
			Factory:  dataSourceMesh,
			TypeName: "aws_appmesh_mesh",
			Name:     "Service Mesh",
			Tags:     unique.Make(inttypes.ServicePackageResourceTags{}),
			Region:   unique.Make(inttypes.ServicePackageResourceRegion{}),
		},
		{
			Factory:  dataSourceRoute,
			TypeName: "aws_appmesh_route",
			Name:     "Route",
			Tags:     unique.Make(inttypes.ServicePackageResourceTags{}),
			Region:   unique.Make(inttypes.ServicePackageResourceRegion{}),
		},
		{
			Factory:  dataSourceVirtualGateway,
			TypeName: "aws_appmesh_virtual_gateway",
			Name:     "Virtual Gateway",
			Tags:     unique.Make(inttypes.ServicePackageResourceTags{}),
			Region:   unique.Make(inttypes.ServicePackageResourceRegion{}),
		},
		{
			Factory:  dataSourceVirtualNode,
			TypeName: "aws_appmesh_virtual_node",
			Name:     "Virtual Node",
			Tags:     unique.Make(inttypes.ServicePackageResourceTags{}),
			Region:   unique.Make(inttypes.ServicePackageResourceRegion{}),
		},
		{
			Factory:  dataSourceVirtualRouter,
			TypeName: "aws_appmesh_virtual_router",
			Name:     "Virtual Router",
			Tags:     unique.Make(inttypes.ServicePackageResourceTags{}),
			Region:   unique.Make(inttypes.ServicePackageResourceRegion{}),
		},
		{
			Factory:  dataSourceVirtualService,
			TypeName: "aws_appmesh_virtual_service",
			Name:     "Virtual Service",
			Tags:     unique.Make(inttypes.ServicePackageResourceTags{}),
			Region:   unique.Make(inttypes.ServicePackageResourceRegion{}),
		},
	}
}

func (p *servicePackage) SDKResources(ctx context.Context) []*inttypes.ServicePackageSDKResource {
	return []*inttypes.ServicePackageSDKResource{
		{
			Factory:  resourceGatewayRoute,
			TypeName: "aws_appmesh_gateway_route",
			Name:     "Gateway Route",
			Tags: unique.Make(inttypes.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrARN,
			}),
			Region: unique.Make(inttypes.ServicePackageResourceRegion{}),
		},
		{
			Factory:  resourceMesh,
			TypeName: "aws_appmesh_mesh",
			Name:     "Service Mesh",
			Tags: unique.Make(inttypes.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrARN,
			}),
			Region: unique.Make(inttypes.ServicePackageResourceRegion{}),
		},
		{
			Factory:  resourceRoute,
			TypeName: "aws_appmesh_route",
			Name:     "Route",
			Tags: unique.Make(inttypes.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrARN,
			}),
			Region: unique.Make(inttypes.ServicePackageResourceRegion{}),
		},
		{
			Factory:  resourceVirtualGateway,
			TypeName: "aws_appmesh_virtual_gateway",
			Name:     "Virtual Gateway",
			Tags: unique.Make(inttypes.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrARN,
			}),
			Region: unique.Make(inttypes.ServicePackageResourceRegion{}),
		},
		{
			Factory:  resourceVirtualNode,
			TypeName: "aws_appmesh_virtual_node",
			Name:     "Virtual Node",
			Tags: unique.Make(inttypes.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrARN,
			}),
			Region: unique.Make(inttypes.ServicePackageResourceRegion{}),
		},
		{
			Factory:  resourceVirtualRouter,
			TypeName: "aws_appmesh_virtual_router",
			Name:     "Virtual Router",
			Tags: unique.Make(inttypes.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrARN,
			}),
			Region: unique.Make(inttypes.ServicePackageResourceRegion{}),
		},
		{
			Factory:  resourceVirtualService,
			TypeName: "aws_appmesh_virtual_service",
			Name:     "Virtual Service",
			Tags: unique.Make(inttypes.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrARN,
			}),
			Region: unique.Make(inttypes.ServicePackageResourceRegion{}),
		},
	}
}

func (p *servicePackage) ServicePackageName() string {
	return names.AppMesh
}

// NewClient returns a new AWS SDK for Go v2 client for this service package's AWS API.
func (p *servicePackage) NewClient(ctx context.Context, config map[string]any) (*appmesh.Client, error) {
	cfg := *(config["aws_sdkv2_config"].(*aws.Config))
	optFns := []func(*appmesh.Options){
		appmesh.WithEndpointResolverV2(newEndpointResolverV2()),
		withBaseEndpoint(config[names.AttrEndpoint].(string)),
		func(o *appmesh.Options) {
			if region := config[names.AttrRegion].(string); o.Region != region {
				tflog.Info(ctx, "overriding provider-configured AWS API region", map[string]any{
					"service":         p.ServicePackageName(),
					"original_region": o.Region,
					"override_region": region,
				})
				o.Region = region
			}
		},
		withExtraOptions(ctx, p, config),
	}

	return appmesh.NewFromConfig(cfg, optFns...), nil
}

// withExtraOptions returns a functional option that allows this service package to specify extra API client options.
// This option is always called after any generated options.
func withExtraOptions(ctx context.Context, sp conns.ServicePackage, config map[string]any) func(*appmesh.Options) {
	if v, ok := sp.(interface {
		withExtraOptions(context.Context, map[string]any) []func(*appmesh.Options)
	}); ok {
		optFns := v.withExtraOptions(ctx, config)

		return func(o *appmesh.Options) {
			for _, optFn := range optFns {
				optFn(o)
			}
		}
	}

	return func(*appmesh.Options) {}
}

func ServicePackage(ctx context.Context) conns.ServicePackage {
	return &servicePackage{}
}
