// Code generated by tools/tfsdk2fw/main.go. Manual editing is required.

package meta

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

func init() {
	registerDataSourceTypeFactory("aws_arn", newDataSourceARNType)
}

// newDataSourceARNType instantiates a new DataSourceType for the aws_arn data source.
func newDataSourceARNType(ctx context.Context) (tfsdk.DataSourceType, error) {
	return &dataSourceARNType{}, nil
}

type dataSourceARNType struct{}

// GetSchema returns the schema for this data source.
func (t *dataSourceARNType) GetSchema(context.Context) (tfsdk.Schema, diag.Diagnostics) {
	schema := tfsdk.Schema{
		Attributes: map[string]tfsdk.Attribute{
			"account": {
				Type:     types.StringType,
				Computed: true,
			},
			"arn": {
				Type:     types.StringType,
				Required: true,
				// TODO Validate,
			},
			"id": {
				Type:     types.StringType,
				Optional: true,
				Computed: true,
			},
			"partition": {
				Type:     types.StringType,
				Computed: true,
			},
			"region": {
				Type:     types.StringType,
				Computed: true,
			},
			"resource": {
				Type:     types.StringType,
				Computed: true,
			},
			"service": {
				Type:     types.StringType,
				Computed: true,
			},
		},
	}

	return schema, nil
}

// NewDataSource instantiates a new DataSource of this DataSourceType.
func (t *dataSourceARNType) NewDataSource(ctx context.Context, provider tfsdk.Provider) (tfsdk.DataSource, diag.Diagnostics) {
	return &dataSourceARN{}, nil
}

type dataSourceARN struct{}

// Read is called when the provider must read data source values in order to update state.
// Config values should be read from the ReadDataSourceRequest and new state values set on the ReadDataSourceResponse.
func (d *dataSourceARN) Read(ctx context.Context, request tfsdk.ReadDataSourceRequest, response *tfsdk.ReadDataSourceResponse) {
}
