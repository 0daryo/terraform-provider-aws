// Code generated by internal/generate/servicepackage/main.go; DO NOT EDIT.

package inspector2

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/inspector2"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/types"
	"github.com/hashicorp/terraform-provider-aws/names"
)

type servicePackage struct{}

func (p *servicePackage) FrameworkDataSources(ctx context.Context) []*types.ServicePackageFrameworkDataSource {
	return []*types.ServicePackageFrameworkDataSource{}
}

func (p *servicePackage) FrameworkResources(ctx context.Context) []*types.ServicePackageFrameworkResource {
	return []*types.ServicePackageFrameworkResource{}
}

func (p *servicePackage) SDKDataSources(ctx context.Context) []*types.ServicePackageSDKDataSource {
	return []*types.ServicePackageSDKDataSource{}
}

func (p *servicePackage) SDKResources(ctx context.Context) []*types.ServicePackageSDKResource {
	return []*types.ServicePackageSDKResource{
		{
			Factory:  resourceDelegatedAdminAccount,
			TypeName: "aws_inspector2_delegated_admin_account",
			Name:     "Delegated Admin Account",
		},
		{
			Factory:  ResourceEnabler,
			TypeName: "aws_inspector2_enabler",
			Name:     "Enabler",
		},
		{
			Factory:  resourceMemberAssociation,
			TypeName: "aws_inspector2_member_association",
			Name:     "Member Association",
		},
		{
			Factory:  resourceOrganizationConfiguration,
			TypeName: "aws_inspector2_organization_configuration",
			Name:     "Organization Configuration",
		},
	}
}

func (p *servicePackage) ServicePackageName() string {
	return names.Inspector2
}

// NewClient returns a new AWS SDK for Go v2 client for this service package's AWS API.
func (p *servicePackage) NewClient(ctx context.Context, config map[string]any) (*inspector2.Client, error) {
	cfg := *(config["aws_sdkv2_config"].(*aws.Config))
	optFns := []func(*inspector2.Options){
		inspector2.WithEndpointResolverV2(newEndpointResolverV2()),
		withBaseEndpoint(config[names.AttrEndpoint].(string)),
	}

	optFns = append(optFns, servicePackageExtraOptFns(ctx, p, config)...)

	return inspector2.NewFromConfig(cfg, optFns...), nil
}

func servicePackageExtraOptFns(ctx context.Context, sp conns.ServicePackage, config map[string]any) []func(*inspector2.Options) {
	if v, ok := sp.(interface {
		extraOptFns(context.Context, map[string]any) []func(*inspector2.Options)
	}); ok {
		return v.extraOptFns(ctx, config)
	}

	return nil
}

func ServicePackage(ctx context.Context) conns.ServicePackage {
	return &servicePackage{}
}
