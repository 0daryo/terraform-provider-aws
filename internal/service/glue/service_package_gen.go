// Code generated by internal/generate/servicepackage/main.go; DO NOT EDIT.

package glue

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/glue"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	itypes "github.com/hashicorp/terraform-provider-aws/internal/types"
	"github.com/hashicorp/terraform-provider-aws/names"
)

type servicePackage struct{}

func (p *servicePackage) FrameworkDataSources(ctx context.Context) []*itypes.ServicePackageFrameworkDataSource {
	return []*itypes.ServicePackageFrameworkDataSource{
		{
			Factory:                 newDataSourceRegistry,
			TypeName:                "aws_glue_registry",
			Name:                    "Registry",
			IsRegionOverrideEnabled: false,
		},
	}
}

func (p *servicePackage) FrameworkResources(ctx context.Context) []*itypes.ServicePackageFrameworkResource {
	return []*itypes.ServicePackageFrameworkResource{
		{
			Factory:                 newResourceCatalogTableOptimizer,
			TypeName:                "aws_glue_catalog_table_optimizer",
			Name:                    "Catalog Table Optimizer",
			IsRegionOverrideEnabled: false,
		},
	}
}

func (p *servicePackage) SDKDataSources(ctx context.Context) []*itypes.ServicePackageSDKDataSource {
	return []*itypes.ServicePackageSDKDataSource{
		{
			Factory:                 DataSourceCatalogTable,
			TypeName:                "aws_glue_catalog_table",
			Name:                    "Catalog Table",
			IsRegionOverrideEnabled: false,
		},
		{
			Factory:                 DataSourceConnection,
			TypeName:                "aws_glue_connection",
			Name:                    "Connection",
			IsRegionOverrideEnabled: false,
		},
		{
			Factory:                 DataSourceDataCatalogEncryptionSettings,
			TypeName:                "aws_glue_data_catalog_encryption_settings",
			Name:                    "Data Catalog Encryption Settings",
			IsRegionOverrideEnabled: false,
		},
		{
			Factory:                 DataSourceScript,
			TypeName:                "aws_glue_script",
			Name:                    "Script",
			IsRegionOverrideEnabled: false,
		},
	}
}

func (p *servicePackage) SDKResources(ctx context.Context) []*itypes.ServicePackageSDKResource {
	return []*itypes.ServicePackageSDKResource{
		{
			Factory:  ResourceCatalogDatabase,
			TypeName: "aws_glue_catalog_database",
			Name:     "Database",
			Tags: &itypes.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrARN,
			},
			IsRegionOverrideEnabled: false,
		},
		{
			Factory:                 ResourceCatalogTable,
			TypeName:                "aws_glue_catalog_table",
			Name:                    "Catalog Table",
			IsRegionOverrideEnabled: false,
		},
		{
			Factory:                 ResourceClassifier,
			TypeName:                "aws_glue_classifier",
			Name:                    "Classifier",
			IsRegionOverrideEnabled: false,
		},
		{
			Factory:  ResourceConnection,
			TypeName: "aws_glue_connection",
			Name:     "Connection",
			Tags: &itypes.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrARN,
			},
			IsRegionOverrideEnabled: false,
		},
		{
			Factory:  ResourceCrawler,
			TypeName: "aws_glue_crawler",
			Name:     "Crawler",
			Tags: &itypes.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrARN,
			},
			IsRegionOverrideEnabled: false,
		},
		{
			Factory:                 ResourceDataCatalogEncryptionSettings,
			TypeName:                "aws_glue_data_catalog_encryption_settings",
			Name:                    "Data Catalog Encryption Settings",
			IsRegionOverrideEnabled: false,
		},
		{
			Factory:  ResourceDataQualityRuleset,
			TypeName: "aws_glue_data_quality_ruleset",
			Name:     "Data Quality Ruleset",
			Tags: &itypes.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrARN,
			},
			IsRegionOverrideEnabled: false,
		},
		{
			Factory:  ResourceDevEndpoint,
			TypeName: "aws_glue_dev_endpoint",
			Name:     "Dev Endpoint",
			Tags: &itypes.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrARN,
			},
			IsRegionOverrideEnabled: false,
		},
		{
			Factory:  ResourceJob,
			TypeName: "aws_glue_job",
			Name:     "Job",
			Tags: &itypes.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrARN,
			},
			IsRegionOverrideEnabled: false,
		},
		{
			Factory:  ResourceMLTransform,
			TypeName: "aws_glue_ml_transform",
			Name:     "ML Transform",
			Tags: &itypes.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrARN,
			},
			IsRegionOverrideEnabled: false,
		},
		{
			Factory:                 ResourcePartition,
			TypeName:                "aws_glue_partition",
			Name:                    "Partition",
			IsRegionOverrideEnabled: false,
		},
		{
			Factory:                 ResourcePartitionIndex,
			TypeName:                "aws_glue_partition_index",
			Name:                    "Partition Index",
			IsRegionOverrideEnabled: false,
		},
		{
			Factory:  ResourceRegistry,
			TypeName: "aws_glue_registry",
			Name:     "Registry",
			Tags: &itypes.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrARN,
			},
			IsRegionOverrideEnabled: false,
		},
		{
			Factory:                 ResourceResourcePolicy,
			TypeName:                "aws_glue_resource_policy",
			Name:                    "Resource Policy",
			IsRegionOverrideEnabled: false,
		},
		{
			Factory:  ResourceSchema,
			TypeName: "aws_glue_schema",
			Name:     "Schema",
			Tags: &itypes.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrARN,
			},
			IsRegionOverrideEnabled: false,
		},
		{
			Factory:                 ResourceSecurityConfiguration,
			TypeName:                "aws_glue_security_configuration",
			Name:                    "Security Configuration",
			IsRegionOverrideEnabled: false,
		},
		{
			Factory:  ResourceTrigger,
			TypeName: "aws_glue_trigger",
			Name:     "Trigger",
			Tags: &itypes.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrARN,
			},
			IsRegionOverrideEnabled: false,
		},
		{
			Factory:                 ResourceUserDefinedFunction,
			TypeName:                "aws_glue_user_defined_function",
			Name:                    "User Defined Function",
			IsRegionOverrideEnabled: false,
		},
		{
			Factory:  ResourceWorkflow,
			TypeName: "aws_glue_workflow",
			Name:     "Workflow",
			Tags: &itypes.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrARN,
			},
			IsRegionOverrideEnabled: false,
		},
	}
}

func (p *servicePackage) ServicePackageName() string {
	return names.Glue
}

// NewClient returns a new AWS SDK for Go v2 client for this service package's AWS API.
func (p *servicePackage) NewClient(ctx context.Context, config map[string]any) (*glue.Client, error) {
	cfg := *(config["aws_sdkv2_config"].(*aws.Config))
	optFns := []func(*glue.Options){
		glue.WithEndpointResolverV2(newEndpointResolverV2()),
		withBaseEndpoint(config[names.AttrEndpoint].(string)),
		func(o *glue.Options) {
			if region := config["region"].(string); o.Region != region {
				tflog.Info(ctx, "overriding provider-configured AWS API region", map[string]any{
					"service":         "glue",
					"original_region": o.Region,
					"override_region": region,
				})
				o.Region = region
			}
		},
		withExtraOptions(ctx, p, config),
	}

	return glue.NewFromConfig(cfg, optFns...), nil
}

// withExtraOptions returns a functional option that allows this service package to specify extra API client options.
// This option is always called after any generated options.
func withExtraOptions(ctx context.Context, sp conns.ServicePackage, config map[string]any) func(*glue.Options) {
	if v, ok := sp.(interface {
		withExtraOptions(context.Context, map[string]any) []func(*glue.Options)
	}); ok {
		optFns := v.withExtraOptions(ctx, config)

		return func(o *glue.Options) {
			for _, optFn := range optFns {
				optFn(o)
			}
		}
	}

	return func(*glue.Options) {}
}

func ServicePackage(ctx context.Context) conns.ServicePackage {
	return &servicePackage{}
}
