// Code generated by internal/generate/identitytests/main.go; DO NOT EDIT.

package datasync_test

import (
	"testing"

	"github.com/aws/aws-sdk-go-v2/service/datasync"
	"github.com/hashicorp/terraform-plugin-testing/compare"
	"github.com/hashicorp/terraform-plugin-testing/config"
	sdkacctest "github.com/hashicorp/terraform-plugin-testing/helper/acctest"
	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/knownvalue"
	"github.com/hashicorp/terraform-plugin-testing/plancheck"
	"github.com/hashicorp/terraform-plugin-testing/statecheck"
	"github.com/hashicorp/terraform-plugin-testing/tfjsonpath"
	"github.com/hashicorp/terraform-plugin-testing/tfversion"
	"github.com/hashicorp/terraform-provider-aws/internal/acctest"
	"github.com/hashicorp/terraform-provider-aws/names"
)

func TestAccDataSyncLocationFSxforOpenZFSFileSystem_Identity_Basic(t *testing.T) {
	ctx := acctest.Context(t)

	var v datasync.DescribeLocationFsxOpenZfsOutput
	resourceName := "aws_datasync_location_fsx_openzfs_file_system.test"
	rName := sdkacctest.RandomWithPrefix(acctest.ResourcePrefix)

	resource.ParallelTest(t, resource.TestCase{
		TerraformVersionChecks: []tfversion.TerraformVersionCheck{
			tfversion.SkipBelow(tfversion.Version1_12_0),
		},
		PreCheck: func() {
			acctest.PreCheck(ctx, t)
			testAccPreCheck(ctx, t)
		},
		ErrorCheck:               acctest.ErrorCheck(t, names.DataSyncServiceID),
		CheckDestroy:             testAccCheckLocationFSxforOpenZFSFileSystemDestroy(ctx),
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
		Steps: []resource.TestStep{
			{
				ConfigDirectory: config.StaticDirectory("testdata/LocationFSxforOpenZFSFileSystem/basic/"),
				ConfigVariables: config.Variables{
					acctest.CtRName: config.StringVariable(rName),
				},
				Check: resource.ComposeAggregateTestCheckFunc(
					testAccCheckLocationFSxforOpenZFSFileSystemExists(ctx, resourceName, &v),
				),
				ConfigStateChecks: []statecheck.StateCheck{
					statecheck.CompareValuePairs(resourceName, tfjsonpath.New(names.AttrID), resourceName, tfjsonpath.New(names.AttrARN), compare.ValuesSame()),
					statecheck.ExpectKnownValue(resourceName, tfjsonpath.New(names.AttrRegion), knownvalue.StringExact(acctest.Region())),
				},
			},
			{
				ConfigDirectory: config.StaticDirectory("testdata/LocationFSxforOpenZFSFileSystem/basic/"),
				ConfigVariables: config.Variables{
					acctest.CtRName: config.StringVariable(rName),
				},
				ImportStateKind:   resource.ImportCommandWithID,
				ImportStateIdFunc: testAccLocationFSxOpenZFSImportStateID(resourceName),
				ResourceName:      resourceName,
				ImportState:       true,
				ImportStateVerify: true,
			},

			{
				ConfigDirectory: config.StaticDirectory("testdata/LocationFSxforOpenZFSFileSystem/basic/"),
				ConfigVariables: config.Variables{
					acctest.CtRName: config.StringVariable(rName),
				},
				ResourceName:      resourceName,
				ImportState:       true,
				ImportStateKind:   resource.ImportBlockWithID,
				ImportStateIdFunc: testAccLocationFSxOpenZFSImportStateID(resourceName),
				ImportPlanChecks: resource.ImportPlanChecks{
					PreApply: []plancheck.PlanCheck{
						plancheck.ExpectKnownValue(resourceName, tfjsonpath.New(names.AttrARN), knownvalue.NotNull()),
						plancheck.ExpectKnownValue(resourceName, tfjsonpath.New(names.AttrID), knownvalue.NotNull()),
						plancheck.ExpectKnownValue(resourceName, tfjsonpath.New(names.AttrRegion), knownvalue.StringExact(acctest.Region())),
					},
				},
			},
		},
	})
}

func TestAccDataSyncLocationFSxforOpenZFSFileSystem_Identity_RegionOverride(t *testing.T) {
	ctx := acctest.Context(t)

	resourceName := "aws_datasync_location_fsx_openzfs_file_system.test"
	rName := sdkacctest.RandomWithPrefix(acctest.ResourcePrefix)

	resource.ParallelTest(t, resource.TestCase{
		TerraformVersionChecks: []tfversion.TerraformVersionCheck{
			tfversion.SkipBelow(tfversion.Version1_12_0),
		},
		PreCheck: func() {
			acctest.PreCheck(ctx, t)
			testAccPreCheck(ctx, t)
		},
		ErrorCheck:               acctest.ErrorCheck(t, names.DataSyncServiceID),
		CheckDestroy:             acctest.CheckDestroyNoop,
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
		Steps: []resource.TestStep{
			{
				ConfigDirectory: config.StaticDirectory("testdata/LocationFSxforOpenZFSFileSystem/region_override/"),
				ConfigVariables: config.Variables{
					acctest.CtRName: config.StringVariable(rName),
					"region":        config.StringVariable(acctest.AlternateRegion()),
				},
				ConfigStateChecks: []statecheck.StateCheck{
					statecheck.CompareValuePairs(resourceName, tfjsonpath.New(names.AttrID), resourceName, tfjsonpath.New(names.AttrARN), compare.ValuesSame()),
					statecheck.ExpectKnownValue(resourceName, tfjsonpath.New(names.AttrRegion), knownvalue.StringExact(acctest.AlternateRegion())),
				},
			},

			// Import command with appended "@<region>"
			{
				ConfigDirectory: config.StaticDirectory("testdata/LocationFSxforOpenZFSFileSystem/region_override/"),
				ConfigVariables: config.Variables{
					acctest.CtRName: config.StringVariable(rName),
					"region":        config.StringVariable(acctest.AlternateRegion()),
				},
				ImportStateKind:   resource.ImportCommandWithID,
				ImportStateIdFunc: acctest.CrossRegionImportStateIdFuncAdapter(resourceName, testAccLocationFSxOpenZFSImportStateID),
				ResourceName:      resourceName,
				ImportState:       true,
				ImportStateVerify: true,
			},

			// // Import command without appended "@<region>"
			// {
			// 	ConfigDirectory: config.StaticDirectory("testdata/LocationFSxforOpenZFSFileSystem/region_override/"),
			// 	ConfigVariables: config.Variables{
			// 		acctest.CtRName: config.StringVariable(rName),
			// 		"region":        config.StringVariable(acctest.AlternateRegion()),
			// 	},
			// 	ImportStateKind:   resource.ImportCommandWithID,
			// 	ImportStateIdFunc: testAccLocationFSxOpenZFSImportStateID(resourceName),
			// 	ResourceName:      resourceName,
			// 	ImportState:       true,
			// 	ImportStateVerify: true,
			// },

			// Import block with Import ID and appended "@<region>"
			{
				ConfigDirectory: config.StaticDirectory("testdata/LocationFSxforOpenZFSFileSystem/region_override/"),
				ConfigVariables: config.Variables{
					acctest.CtRName: config.StringVariable(rName),
					"region":        config.StringVariable(acctest.AlternateRegion()),
				},
				ResourceName:      resourceName,
				ImportState:       true,
				ImportStateKind:   resource.ImportBlockWithID,
				ImportStateIdFunc: acctest.CrossRegionImportStateIdFuncAdapter(resourceName, testAccLocationFSxOpenZFSImportStateID),
				ImportPlanChecks: resource.ImportPlanChecks{
					PreApply: []plancheck.PlanCheck{
						plancheck.ExpectKnownValue(resourceName, tfjsonpath.New(names.AttrARN), knownvalue.NotNull()),
						plancheck.ExpectKnownValue(resourceName, tfjsonpath.New(names.AttrID), knownvalue.NotNull()),
						plancheck.ExpectKnownValue(resourceName, tfjsonpath.New(names.AttrRegion), knownvalue.StringExact(acctest.AlternateRegion())),
					},
				},
			},

			// // Import block with Import ID and no appended "@<region>"
			// {
			// 	ConfigDirectory: config.StaticDirectory("testdata/LocationFSxforOpenZFSFileSystem/region_override/"),
			// 	ConfigVariables: config.Variables{
			// 		acctest.CtRName: config.StringVariable(rName),
			// 		"region":        config.StringVariable(acctest.AlternateRegion()),
			// 	},
			// 	ResourceName:      resourceName,
			// 	ImportState:       true,
			// 	ImportStateKind:   resource.ImportBlockWithID,
			// 	ImportStateIdFunc: testAccLocationFSxOpenZFSImportStateID(resourceName),
			// 	ImportPlanChecks: resource.ImportPlanChecks{
			// 		PreApply: []plancheck.PlanCheck{
			// 			plancheck.ExpectKnownValue(resourceName, tfjsonpath.New(names.AttrARN), knownvalue.NotNull()),
			// 			plancheck.ExpectKnownValue(resourceName, tfjsonpath.New(names.AttrID), knownvalue.NotNull()),
			// 			plancheck.ExpectKnownValue(resourceName, tfjsonpath.New(names.AttrRegion), knownvalue.StringExact(acctest.AlternateRegion())),
			// 		},
			// 	},
			// },
		},
	})
}
