// Code generated by internal/generate/identitytests/main.go; DO NOT EDIT.

package datasync_test

import (
	"testing"

	"github.com/aws/aws-sdk-go-v2/service/datasync"
	"github.com/hashicorp/terraform-plugin-testing/compare"
	"github.com/hashicorp/terraform-plugin-testing/config"
	sdkacctest "github.com/hashicorp/terraform-plugin-testing/helper/acctest"
	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/knownvalue"
	"github.com/hashicorp/terraform-plugin-testing/statecheck"
	"github.com/hashicorp/terraform-plugin-testing/tfjsonpath"
	"github.com/hashicorp/terraform-plugin-testing/tfversion"
	"github.com/hashicorp/terraform-provider-aws/internal/acctest"
	"github.com/hashicorp/terraform-provider-aws/names"
)

func TestAccDataSyncLocationFSxforWindowsFileServerFileSystem_Identity_Basic(t *testing.T) {
	ctx := acctest.Context(t)

	var v datasync.DescribeLocationFsxWindowsOutput
	resourceName := "aws_datasync_location_fsx_windows_file_system.test"
	rName := sdkacctest.RandomWithPrefix(acctest.ResourcePrefix)
	domain := acctest.RandomDomainName()

	resource.ParallelTest(t, resource.TestCase{
		TerraformVersionChecks: []tfversion.TerraformVersionCheck{
			tfversion.SkipBelow(tfversion.Version1_12_0),
		},
		PreCheck: func() {
			acctest.PreCheck(ctx, t)
			testAccPreCheck(ctx, t)
		},
		ErrorCheck:               acctest.ErrorCheck(t, names.DataSyncServiceID),
		CheckDestroy:             testAccCheckLocationFSxforWindowsFileServerFileSystemDestroy(ctx),
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
		Steps: []resource.TestStep{
			{
				ConfigDirectory: config.StaticDirectory("testdata/LocationFSxforWindowsFileServerFileSystem/basic/"),
				ConfigVariables: config.Variables{
					acctest.CtRName: config.StringVariable(rName),
					"domain":        config.StringVariable(domain),
				},
				Check: resource.ComposeAggregateTestCheckFunc(
					testAccCheckLocationFSxforWindowsFileServerFileSystemExists(ctx, resourceName, &v),
				),
				ConfigStateChecks: []statecheck.StateCheck{
					statecheck.CompareValuePairs(resourceName, tfjsonpath.New(names.AttrID), resourceName, tfjsonpath.New(names.AttrARN), compare.ValuesSame()),
					statecheck.ExpectKnownValue(resourceName, tfjsonpath.New(names.AttrRegion), knownvalue.StringExact(acctest.Region())),
					statecheck.ExpectIdentityValueMatchesState(resourceName, tfjsonpath.New(names.AttrARN)),
				},
			},
			{
				ConfigDirectory: config.StaticDirectory("testdata/LocationFSxforWindowsFileServerFileSystem/basic/"),
				ConfigVariables: config.Variables{
					acctest.CtRName: config.StringVariable(rName),
					"domain":        config.StringVariable(domain),
				},
				ImportStateKind:   resource.ImportCommandWithID,
				ImportStateIdFunc: testAccLocationFSxWindowsImportStateID(resourceName),
				ResourceName:      resourceName,
				ImportState:       true,
				ImportStateVerify: true,
				ImportStateVerifyIgnore: []string{
					names.AttrPassword,
				},
			},

			// TODO: Plannable import cannot be tested due to import diffs
		},
	})
}

func TestAccDataSyncLocationFSxforWindowsFileServerFileSystem_Identity_RegionOverride(t *testing.T) {
	ctx := acctest.Context(t)

	resourceName := "aws_datasync_location_fsx_windows_file_system.test"
	rName := sdkacctest.RandomWithPrefix(acctest.ResourcePrefix)
	domain := acctest.RandomDomainName()

	resource.ParallelTest(t, resource.TestCase{
		TerraformVersionChecks: []tfversion.TerraformVersionCheck{
			tfversion.SkipBelow(tfversion.Version1_12_0),
		},
		PreCheck: func() {
			acctest.PreCheck(ctx, t)
			testAccPreCheck(ctx, t)
		},
		ErrorCheck:               acctest.ErrorCheck(t, names.DataSyncServiceID),
		CheckDestroy:             acctest.CheckDestroyNoop,
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
		Steps: []resource.TestStep{
			{
				ConfigDirectory: config.StaticDirectory("testdata/LocationFSxforWindowsFileServerFileSystem/region_override/"),
				ConfigVariables: config.Variables{
					acctest.CtRName: config.StringVariable(rName),
					"domain":        config.StringVariable(domain),
					"region":        config.StringVariable(acctest.AlternateRegion()),
				},
				ConfigStateChecks: []statecheck.StateCheck{
					statecheck.CompareValuePairs(resourceName, tfjsonpath.New(names.AttrID), resourceName, tfjsonpath.New(names.AttrARN), compare.ValuesSame()),
					statecheck.ExpectKnownValue(resourceName, tfjsonpath.New(names.AttrRegion), knownvalue.StringExact(acctest.AlternateRegion())),
					statecheck.ExpectIdentityValueMatchesState(resourceName, tfjsonpath.New(names.AttrARN)),
				},
			},

			// Import command with appended "@<region>"
			{
				ConfigDirectory: config.StaticDirectory("testdata/LocationFSxforWindowsFileServerFileSystem/region_override/"),
				ConfigVariables: config.Variables{
					acctest.CtRName: config.StringVariable(rName),
					"domain":        config.StringVariable(domain),
					"region":        config.StringVariable(acctest.AlternateRegion()),
				},
				ImportStateKind:   resource.ImportCommandWithID,
				ImportStateIdFunc: acctest.CrossRegionImportStateIdFuncAdapter(resourceName, testAccLocationFSxWindowsImportStateID),
				ResourceName:      resourceName,
				ImportState:       true,
				ImportStateVerify: true,
				ImportStateVerifyIgnore: []string{
					names.AttrPassword,
				},
			},

			// Import command without appended "@<region>"
			{
				ConfigDirectory: config.StaticDirectory("testdata/LocationFSxforWindowsFileServerFileSystem/region_override/"),
				ConfigVariables: config.Variables{
					acctest.CtRName: config.StringVariable(rName),
					"domain":        config.StringVariable(domain),
					"region":        config.StringVariable(acctest.AlternateRegion()),
				},
				ImportStateKind:   resource.ImportCommandWithID,
				ImportStateIdFunc: testAccLocationFSxWindowsImportStateID(resourceName),
				ResourceName:      resourceName,
				ImportState:       true,
				ImportStateVerify: true,
				ImportStateVerifyIgnore: []string{
					names.AttrPassword,
				},
			},

			// TODO: Plannable import cannot be tested due to import diffs
		},
	})
}
