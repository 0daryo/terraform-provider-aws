// Code generated by internal/generate/tags/main.go; DO NOT EDIT.
package route53domains

import (
	"fmt"

	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/service/route53domains"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
)

// GetTag fetches an individual route53domains service tag for a resource.
// Returns whether the key value and any errors. A NotFoundError is used to signal that no value was found.
// This function will optimise the handling over ListTags, if possible.
// The identifier is typically the Amazon Resource Name (ARN), although
// it may also be a different identifier depending on the service.
func GetTag(conn *route53domains.Route53Domains, identifier string, key string) (*string, error) {
	listTags, err := ListTags(conn, identifier)

	if err != nil {
		return nil, err
	}

	if !listTags.KeyExists(key) {
		return nil, tfresource.NewEmptyResultError(nil)
	}

	return listTags.KeyValue(key), nil
}

// ListTags lists route53domains service tags.
// The identifier is typically the Amazon Resource Name (ARN), although
// it may also be a different identifier depending on the service.
func ListTags(conn *route53domains.Route53Domains, identifier string) (tftags.KeyValueTags, error) {
	input := &route53domains.ListTagsForDomainInput{
		DomainName: aws.String(identifier),
	}

	output, err := conn.ListTagsForDomain(input)

	if err != nil {
		return tftags.New(nil), err
	}

	return KeyValueTags(output.TagList), nil
}

// []*SERVICE.Tag handling

// Tags returns route53domains service tags.
func Tags(tags tftags.KeyValueTags) []*route53domains.Tag {
	result := make([]*route53domains.Tag, 0, len(tags))

	for k, v := range tags.Map() {
		tag := &route53domains.Tag{
			Key:   aws.String(k),
			Value: aws.String(v),
		}

		result = append(result, tag)
	}

	return result
}

// KeyValueTags creates tftags.KeyValueTags from route53domains service tags.
func KeyValueTags(tags []*route53domains.Tag) tftags.KeyValueTags {
	m := make(map[string]*string, len(tags))

	for _, tag := range tags {
		m[aws.StringValue(tag.Key)] = tag.Value
	}

	return tftags.New(m)
}

// UpdateTags updates route53domains service tags.
// The identifier is typically the Amazon Resource Name (ARN), although
// it may also be a different identifier depending on the service.
func UpdateTags(conn *route53domains.Route53Domains, identifier string, oldTagsMap interface{}, newTagsMap interface{}) error {
	oldTags := tftags.New(oldTagsMap)
	newTags := tftags.New(newTagsMap)

	if removedTags := oldTags.Removed(newTags); len(removedTags) > 0 {
		input := &route53domains.DeleteTagsForDomainInput{
			DomainName:   aws.String(identifier),
			TagsToDelete: aws.StringSlice(removedTags.IgnoreAWS().Keys()),
		}

		_, err := conn.DeleteTagsForDomain(input)

		if err != nil {
			return fmt.Errorf("error untagging resource (%s): %w", identifier, err)
		}
	}

	if updatedTags := oldTags.Updated(newTags); len(updatedTags) > 0 {
		input := &route53domains.UpdateTagsForDomainInput{
			DomainName:   aws.String(identifier),
			TagsToUpdate: Tags(updatedTags.IgnoreAWS()),
		}

		_, err := conn.UpdateTagsForDomain(input)

		if err != nil {
			return fmt.Errorf("error tagging resource (%s): %w", identifier, err)
		}
	}

	return nil
}
