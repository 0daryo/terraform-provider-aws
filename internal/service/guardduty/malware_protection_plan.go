// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

package guardduty

import (
	"context"

	awstypes "github.com/aws/aws-sdk-go-v2/service/guardduty/types"
	"github.com/hashicorp/terraform-plugin-framework-timetypes/timetypes"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/listplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/setplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	fwtypes "github.com/hashicorp/terraform-provider-aws/internal/framework/types"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/names"
)

const (
	ResNameMalwareProtectionPlan = "Malware Protection Plan"
)

type resourceMalwareProtectionPlan struct {
	framework.ResourceWithConfigure
}

func (r *resourceMalwareProtectionPlan) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = "aws_guardduty_malware_protection_plan"
}

func (r *resourceMalwareProtectionPlan) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Attributes: map[string]schema.Attribute{
			"actions": schema.ListAttribute{ // proto5 Optional+Computed nested block.
				CustomType: fwtypes.NewListNestedObjectTypeOf[actionsModel](ctx),
				Optional:   true,
				Computed:   true,
				PlanModifiers: []planmodifier.List{
					listplanmodifier.UseStateForUnknown(),
				},
				Validators: []validator.List{
					listvalidator.SizeAtMost(1),
				},
				ElementType: types.ObjectType{
					AttrTypes: fwtypes.AttributeTypesMust[actionsModel](ctx),
				},
			},
			names.AttrARN: framework.ARNAttributeComputedOnly(),
			names.AttrCreatedAt: schema.StringAttribute{
				CustomType: timetypes.RFC3339Type{},
				Computed:   true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			names.AttrID: framework.IDAttribute(),
			"role": schema.StringAttribute{
				CustomType: fwtypes.ARNType,
				Required:   true,
			},
			names.AttrStatus: schema.StringAttribute{
				Computed: true,
			},
			names.AttrTags:    tftags.TagsAttribute(),
			names.AttrTagsAll: tftags.TagsAttributeComputedOnly(),
		},
		Blocks: map[string]schema.Block{
			"protected_resource": schema.ListNestedBlock{
				CustomType: fwtypes.NewListNestedObjectTypeOf[protectedResourceModel](ctx),
				Validators: []validator.List{
					listvalidator.IsRequired(),
					listvalidator.SizeAtLeast(1),
					listvalidator.SizeAtMost(1),
				},
				NestedObject: schema.NestedBlockObject{
					Blocks: map[string]schema.Block{
						"s3_bucket": schema.ListNestedBlock{
							CustomType: fwtypes.NewListNestedObjectTypeOf[s3BucketModel](ctx),
							Validators: []validator.List{
								listvalidator.IsRequired(),
								listvalidator.SizeAtLeast(1),
								listvalidator.SizeAtMost(1),
							},
							NestedObject: schema.NestedBlockObject{
								Attributes: map[string]schema.Attribute{
									"bucket_name": schema.StringAttribute{
										Required: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplace(),
										},
									},
									"object_prefixes": schema.SetAttribute{
										CustomType:  fwtypes.SetOfStringType,
										ElementType: types.StringType,
										Optional:    true,
										Computed:    true,
										PlanModifiers: []planmodifier.Set{
											setplanmodifier.UseStateForUnknown(),
										},
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

type malwareProtectionPlanResourceModel struct {
	Actions           fwtypes.ListNestedObjectValueOf[actionsModel]           `tfsdk:"actions"`
	Arn               types.String                                            `tfsdk:"arn"`
	CreatedAt         timetypes.RFC3339                                       `tfsdk:"created_at"`
	ID                types.String                                            `tfsdk:"id"`
	ProtectedResource fwtypes.ListNestedObjectValueOf[protectedResourceModel] `tfsdk:"protected_resource"`
	Role              fwtypes.ARN                                             `tfsdk:"role"`
	Status            types.String                                            `tfsdk:"status"`
	Tags              types.Map                                               `tfsdk:"tags"`
	TagsAll           types.Map                                               `tfsdk:"tags_all"`
}

type actionsModel struct {
	Tagging fwtypes.ListNestedObjectValueOf[taggingModel] `tfsdk:"tagging"`
}

type taggingModel struct {
	Status fwtypes.StringEnum[awstypes.MalwareProtectionPlanTaggingActionStatus] `tfsdk:"status"`
}

type protectedResourceModel struct {
	S3Bucket fwtypes.ListNestedObjectValueOf[s3BucketModel] `tfsdk:"s3_bucket"`
}

type s3BucketModel struct {
	BucketName     types.String                     `tfsdk:"bucket_name"`
	ObjectPrefixes fwtypes.SetValueOf[types.String] `tfsdk:"object_prefixes"`
}
