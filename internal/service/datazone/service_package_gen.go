// Code generated by internal/generate/servicepackage/main.go; DO NOT EDIT.

package datazone

import (
	"context"
	"unique"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/datazone"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	inttypes "github.com/hashicorp/terraform-provider-aws/internal/types"
	"github.com/hashicorp/terraform-provider-aws/names"
)

type servicePackage struct{}

func (p *servicePackage) FrameworkDataSources(ctx context.Context) []*inttypes.ServicePackageFrameworkDataSource {
	return []*inttypes.ServicePackageFrameworkDataSource{
		{
			Factory:  newDataSourceDomain,
			TypeName: "aws_datazone_domain",
			Name:     "Domain",
			Region: unique.Make(inttypes.ServicePackageResourceRegion{
				IsGlobal:          false,
				IsOverrideEnabled: false,
			}),
		},
		{
			Factory:  newDataSourceEnvironmentBlueprint,
			TypeName: "aws_datazone_environment_blueprint",
			Name:     "Environment Blueprint",
			Region: unique.Make(inttypes.ServicePackageResourceRegion{
				IsGlobal:          false,
				IsOverrideEnabled: false,
			}),
		},
	}
}

func (p *servicePackage) FrameworkResources(ctx context.Context) []*inttypes.ServicePackageFrameworkResource {
	return []*inttypes.ServicePackageFrameworkResource{
		{
			Factory:  newResourceAssetType,
			TypeName: "aws_datazone_asset_type",
			Name:     "Asset Type",
			Region: unique.Make(inttypes.ServicePackageResourceRegion{
				IsGlobal:          false,
				IsOverrideEnabled: false,
			}),
		},
		{
			Factory:  newResourceDomain,
			TypeName: "aws_datazone_domain",
			Name:     "Domain",
			Tags: unique.Make(inttypes.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrARN,
			}),
			Region: unique.Make(inttypes.ServicePackageResourceRegion{
				IsGlobal:          false,
				IsOverrideEnabled: false,
			}),
		},
		{
			Factory:  newResourceEnvironment,
			TypeName: "aws_datazone_environment",
			Name:     "Environment",
			Region: unique.Make(inttypes.ServicePackageResourceRegion{
				IsGlobal:          false,
				IsOverrideEnabled: false,
			}),
		},
		{
			Factory:  newResourceEnvironmentBlueprintConfiguration,
			TypeName: "aws_datazone_environment_blueprint_configuration",
			Name:     "Environment Blueprint Configuration",
			Region: unique.Make(inttypes.ServicePackageResourceRegion{
				IsGlobal:          false,
				IsOverrideEnabled: false,
			}),
		},
		{
			Factory:  newResourceEnvironmentProfile,
			TypeName: "aws_datazone_environment_profile",
			Name:     "Environment Profile",
			Region: unique.Make(inttypes.ServicePackageResourceRegion{
				IsGlobal:          false,
				IsOverrideEnabled: false,
			}),
		},
		{
			Factory:  newResourceFormType,
			TypeName: "aws_datazone_form_type",
			Name:     "Form Type",
			Region: unique.Make(inttypes.ServicePackageResourceRegion{
				IsGlobal:          false,
				IsOverrideEnabled: false,
			}),
		},
		{
			Factory:  newResourceGlossary,
			TypeName: "aws_datazone_glossary",
			Name:     "Glossary",
			Region: unique.Make(inttypes.ServicePackageResourceRegion{
				IsGlobal:          false,
				IsOverrideEnabled: false,
			}),
		},
		{
			Factory:  newResourceGlossaryTerm,
			TypeName: "aws_datazone_glossary_term",
			Name:     "Glossary Term",
			Region: unique.Make(inttypes.ServicePackageResourceRegion{
				IsGlobal:          false,
				IsOverrideEnabled: false,
			}),
		},
		{
			Factory:  newResourceProject,
			TypeName: "aws_datazone_project",
			Name:     "Project",
			Region: unique.Make(inttypes.ServicePackageResourceRegion{
				IsGlobal:          false,
				IsOverrideEnabled: false,
			}),
		},
		{
			Factory:  newResourceUserProfile,
			TypeName: "aws_datazone_user_profile",
			Name:     "User Profile",
			Region: unique.Make(inttypes.ServicePackageResourceRegion{
				IsGlobal:          false,
				IsOverrideEnabled: false,
			}),
		},
	}
}

func (p *servicePackage) SDKDataSources(ctx context.Context) []*inttypes.ServicePackageSDKDataSource {
	return []*inttypes.ServicePackageSDKDataSource{}
}

func (p *servicePackage) SDKResources(ctx context.Context) []*inttypes.ServicePackageSDKResource {
	return []*inttypes.ServicePackageSDKResource{}
}

func (p *servicePackage) ServicePackageName() string {
	return names.DataZone
}

// NewClient returns a new AWS SDK for Go v2 client for this service package's AWS API.
func (p *servicePackage) NewClient(ctx context.Context, config map[string]any) (*datazone.Client, error) {
	cfg := *(config["aws_sdkv2_config"].(*aws.Config))
	optFns := []func(*datazone.Options){
		datazone.WithEndpointResolverV2(newEndpointResolverV2()),
		withBaseEndpoint(config[names.AttrEndpoint].(string)),
		func(o *datazone.Options) {
			if region := config[names.AttrRegion].(string); o.Region != region {
				tflog.Info(ctx, "overriding provider-configured AWS API region", map[string]any{
					"service":         p.ServicePackageName(),
					"original_region": o.Region,
					"override_region": region,
				})
				o.Region = region
			}
		},
		withExtraOptions(ctx, p, config),
	}

	return datazone.NewFromConfig(cfg, optFns...), nil
}

// withExtraOptions returns a functional option that allows this service package to specify extra API client options.
// This option is always called after any generated options.
func withExtraOptions(ctx context.Context, sp conns.ServicePackage, config map[string]any) func(*datazone.Options) {
	if v, ok := sp.(interface {
		withExtraOptions(context.Context, map[string]any) []func(*datazone.Options)
	}); ok {
		optFns := v.withExtraOptions(ctx, config)

		return func(o *datazone.Options) {
			for _, optFn := range optFns {
				optFn(o)
			}
		}
	}

	return func(*datazone.Options) {}
}

func ServicePackage(ctx context.Context) conns.ServicePackage {
	return &servicePackage{}
}
