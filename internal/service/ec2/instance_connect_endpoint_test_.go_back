//package ec2_test
//
//import (
//	"fmt"
//	"github.com/aws/aws-sdk-go-v2/aws"
//	"github.com/hashicorp/terraform-provider-aws/internal/conns"
//	"github.com/hashicorp/terraform-provider-aws/internal/create"
//	tfec2 "github.com/hashicorp/terraform-provider-aws/internal/service/ec2"
//	"regexp"
//	"testing"
//
//	sdkacctest "github.com/hashicorp/terraform-plugin-testing/helper/acctest"
//	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
//	"github.com/hashicorp/terraform-provider-aws/internal/acctest"
//	"github.com/hashicorp/terraform-provider-aws/names"
//)
//
//func TestInstanceConnectEndpointExampleUnitTest(t *testing.T) {
//	testCases := []struct {
//		TestName string
//		Input    string
//		Expected string
//		Error    bool
//	}{
//		{
//			TestName: "empty",
//			Input:    "",
//			Expected: "",
//			Error:    true,
//		},
//		{
//			TestName: "descriptive name",
//			Input:    "some input",
//			Expected: "some output",
//			Error:    false,
//		},
//		{
//			TestName: "another descriptive name",
//			Input:    "more input",
//			Expected: "more output",
//			Error:    false,
//		},
//	}
//
//	for _, testCase := range testCases {
//		t.Run(testCase.TestName, func(t *testing.T) {
//			got, err := tfec2.FunctionFromResource(testCase.Input)
//
//			if err != nil && !testCase.Error {
//				t.Errorf("got error (%s), expected no error", err)
//			}
//
//			if err == nil && testCase.Error {
//				t.Errorf("got (%s) and no error, expected error", got)
//			}
//
//			if got != testCase.Expected {
//				t.Errorf("got %s, expected %s", got, testCase.Expected)
//			}
//		})
//	}
//}
//
//func TestAccEC2InstanceConnectEndpoint_basic(t *testing.T) {
//	ctx := acctest.Context(t)
//	// TIP: This is a long-running test guard for tests that run longer than
//	// 300s (5 min) generally.
//	if testing.Short() {
//		t.Skip("skipping long-running test in short mode")
//	}
//
//	var instanceconnectendpoint ec2.DescribeInstanceConnectEndpointResponse
//	rName := sdkacctest.RandomWithPrefix(acctest.ResourcePrefix)
//	resourceName := "aws_ec2_instance_connect_endpoint.test"
//
//	resource.ParallelTest(t, resource.TestCase{
//		PreCheck: func() {
//			acctest.PreCheck(ctx, t)
//			acctest.PreCheckPartitionHasService(t, names.EC2EndpointID)
//			testAccPreCheck(ctx, t)
//		},
//		ErrorCheck:               acctest.ErrorCheck(t, names.EC2EndpointID),
//		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
//		CheckDestroy:             testAccCheckInstanceConnectEndpointDestroy(ctx),
//		Steps: []resource.TestStep{
//			{
//				Config: testAccInstanceConnectEndpointConfig_basic(rName),
//				Check: resource.ComposeTestCheckFunc(
//					testAccCheckInstanceConnectEndpointExists(ctx, resourceName, &instanceconnectendpoint),
//					resource.TestCheckResourceAttr(resourceName, "auto_minor_version_upgrade", "false"),
//					resource.TestCheckResourceAttrSet(resourceName, "maintenance_window_start_time.0.day_of_week"),
//					resource.TestCheckTypeSetElemNestedAttrs(resourceName, "user.*", map[string]string{
//						"console_access": "false",
//						"groups.#":       "0",
//						"username":       "Test",
//						"password":       "TestTest1234",
//					}),
//					acctest.MatchResourceAttrRegionalARN(resourceName, "arn", "ec2", regexp.MustCompile(`instanceconnectendpoint:+.`)),
//				),
//			},
//			{
//				ResourceName:            resourceName,
//				ImportState:             true,
//				ImportStateVerify:       true,
//				ImportStateVerifyIgnore: []string{"apply_immediately", "user"},
//			},
//		},
//	})
//}
//
//func TestAccEC2InstanceConnectEndpoint_disappears(t *testing.T) {
//	ctx := acctest.Context(t)
//	if testing.Short() {
//		t.Skip("skipping long-running test in short mode")
//	}
//
//	var instanceconnectendpoint ec2.DescribeInstanceConnectEndpointResponse
//	rName := sdkacctest.RandomWithPrefix(acctest.ResourcePrefix)
//	resourceName := "aws_ec2_instance_connect_endpoint.test"
//
//	resource.ParallelTest(t, resource.TestCase{
//		PreCheck: func() {
//			acctest.PreCheck(ctx, t)
//			acctest.PreCheckPartitionHasService(t, names.EC2EndpointID)
//			testAccPreCheck(t)
//		},
//		ErrorCheck:               acctest.ErrorCheck(t, names.EC2EndpointID),
//		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
//		CheckDestroy:             testAccCheckInstanceConnectEndpointDestroy(ctx),
//		Steps: []resource.TestStep{
//			{
//				Config: testAccInstanceConnectEndpointConfig_basic(rName, testAccInstanceConnectEndpointVersionNewer),
//				Check: resource.ComposeTestCheckFunc(
//					testAccCheckInstanceConnectEndpointExists(ctx, resourceName, &instanceconnectendpoint),
//					acctest.CheckResourceDisappears(ctx, acctest.Provider, tfec2.ResourceInstanceConnectEndpoint(), resourceName),
//				),
//				ExpectNonEmptyPlan: true,
//			},
//		},
//	})
//}
//
//func testAccCheckInstanceConnectEndpointDestroy(ctx context.Context) resource.TestCheckFunc {
//	return func(s *terraform.State) error {
//		conn := acctest.Provider.Meta().(*conns.AWSClient).EC2Client(ctx)
//
//		for _, rs := range s.RootModule().Resources {
//			if rs.Type != "aws_ec2_instance_connect_endpoint" {
//				continue
//			}
//
//			input := &ec2.DescribeInstanceConnectEndpointInput{
//				InstanceConnectEndpointId: aws.String(rs.Primary.ID),
//			}
//			_, err := conn.DescribeInstanceConnectEndpoint(ctx, &ec2.DescribeInstanceConnectEndpointInput{
//				InstanceConnectEndpointId: aws.String(rs.Primary.ID),
//			})
//			if errs.IsA[*types.ResourceNotFoundException](err) {
//				return nil
//			}
//			if err != nil {
//				return nil
//			}
//
//			return create.Error(names.EC2, create.ErrActionCheckingDestroyed, tfec2.ResNameInstanceConnectEndpoint, rs.Primary.ID, errors.New("not destroyed"))
//		}
//
//		return nil
//	}
//}
//
//func testAccCheckInstanceConnectEndpointExists(ctx context.Context, name string, instanceconnectendpoint *ec2.DescribeInstanceConnectEndpointResponse) resource.TestCheckFunc {
//	return func(s *terraform.State) error {
//		rs, ok := s.RootModule().Resources[name]
//		if !ok {
//			return create.Error(names.EC2, create.ErrActionCheckingExistence, tfec2.ResNameInstanceConnectEndpoint, name, errors.New("not found"))
//		}
//
//		if rs.Primary.ID == "" {
//			return create.Error(names.EC2, create.ErrActionCheckingExistence, tfec2.ResNameInstanceConnectEndpoint, name, errors.New("not set"))
//		}
//
//		conn := acctest.Provider.Meta().(*conns.AWSClient).EC2Client(ctx)
//		resp, err := conn.DescribeInstanceConnectEndpoint(ctx, &ec2.DescribeInstanceConnectEndpointInput{
//			InstanceConnectEndpointId: aws.String(rs.Primary.ID),
//		})
//
//		if err != nil {
//			return create.Error(names.EC2, create.ErrActionCheckingExistence, tfec2.ResNameInstanceConnectEndpoint, rs.Primary.ID, err)
//		}
//
//		*instanceconnectendpoint = *resp
//
//		return nil
//	}
//}
//
//func testAccPreCheck(ctx context.Context, t *testing.T) {
//	conn := acctest.Provider.Meta().(*conns.AWSClient).EC2Client(ctx)
//
//	input := &ec2.ListInstanceConnectEndpointsInput{}
//	_, err := conn.ListInstanceConnectEndpoints(ctx, input)
//
//	if acctest.PreCheckSkipError(err) {
//		t.Skipf("skipping acceptance testing: %s", err)
//	}
//	if err != nil {
//		t.Fatalf("unexpected PreCheck error: %s", err)
//	}
//}
//
//func testAccCheckInstanceConnectEndpointNotRecreated(before, after *ec2.DescribeInstanceConnectEndpointResponse) resource.TestCheckFunc {
//	return func(s *terraform.State) error {
//		if before, after := aws.ToString(before.InstanceConnectEndpointId), aws.ToString(after.InstanceConnectEndpointId); before != after {
//			return create.Error(names.EC2, create.ErrActionCheckingNotRecreated, tfec2.ResNameInstanceConnectEndpoint, aws.ToString(before.InstanceConnectEndpointId), errors.New("recreated"))
//		}
//
//		return nil
//	}
//}
//
//func testAccInstanceConnectEndpointConfig_basic(rName, string) string {
//	return fmt.Sprintf(`
//data "aws_subnet_ids" "selected" {
//  filter {
//    name   = "tag:Name"
//    values = ["private-subnet"]
//  }
//}
//
//data "aws_security_group" "selected" {
//  name = "ec2ice-sg"
//}
//
//resource "aws_ec2_instance_connect_endpoint" "test" {
//  subnet_id          = data.aws_subnet_ids.selected.ids[0]
//  security_group_ids = [data.aws_security_group.selected.id]
//  preserve_client_ip - false
//}
//`, rName)
//}
//
//
